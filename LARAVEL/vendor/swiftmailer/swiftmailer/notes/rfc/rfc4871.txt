




Network Working Group                                          E. Allman
Request for Comments: 4871                                Sendmail, Inc.
Obsoletes: 4870                                                J. Callas
Category: Standards Track                                PGP Corporation
                                                               M. Delany
                                                               M. Libbey
                                                              Yahoo! Inc
                                                               J. Fenton
                                                               M. Thomas
                                                     Cisco Systems, Inc.
                                                                May 2007


              DomainKeys Identified Mail (DKIM) Signatures

Status of This Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (C) The IETF Trust (2007).

Abstract

   DomainKeys Identified Mail (DKIM) defines a domain-level
   authentication framework for email using public-key cryptography and
   key server technology to permit verification of the source and
   contents of messages by either Mail Transfer Agents (MTAs) or Mail
   User Agents (MUAs).  The ultimate goal of this framework is to permit
   a signing domain to assert responsibility for a message, thus
   protecting message signer identity and the integrity of the messages
   they convey while retaining the functionality of Internet email as it
   is known today.  Protection of email identity may assist in the
   global control of "spam" and "phishing".












Allman, et al.              Standards Track                     [Page 1]

RFC 4871                    DKIM Signatures                     May 2007


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Signing Identity . . . . . . . . . . . . . . . . . . . . .  5
     1.2.  Scalability  . . . . . . . . . . . . . . . . . . . . . . .  5
     1.3.  Simple Key Management  . . . . . . . . . . . . . . . . . .  5
   2.  Terminology and Definitions  . . . . . . . . . . . . . . . . .  5
     2.1.  Signers  . . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.2.  Verifiers  . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3.  Whitespace . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.4.  Common ABNF Tokens . . . . . . . . . . . . . . . . . . . .  6
     2.5.  Imported ABNF Tokens . . . . . . . . . . . . . . . . . . .  7
     2.6.  DKIM-Quoted-Printable  . . . . . . . . . . . . . . . . . .  7
   3.  Protocol Elements  . . . . . . . . . . . . . . . . . . . . . .  8
     3.1.  Selectors  . . . . . . . . . . . . . . . . . . . . . . . .  8
     3.2.  Tag=Value Lists  . . . . . . . . . . . . . . . . . . . . . 10
     3.3.  Signing and Verification Algorithms  . . . . . . . . . . . 11
     3.4.  Canonicalization . . . . . . . . . . . . . . . . . . . . . 13
     3.5.  The DKIM-Signature Header Field  . . . . . . . . . . . . . 17
     3.6.  Key Management and Representation  . . . . . . . . . . . . 25
     3.7.  Computing the Message Hashes . . . . . . . . . . . . . . . 29
     3.8.  Signing by Parent Domains  . . . . . . . . . . . . . . . . 31
   4.  Semantics of Multiple Signatures . . . . . . . . . . . . . . . 32
     4.1.  Example Scenarios  . . . . . . . . . . . . . . . . . . . . 32
     4.2.  Interpretation . . . . . . . . . . . . . . . . . . . . . . 33
   5.  Signer Actions . . . . . . . . . . . . . . . . . . . . . . . . 34
     5.1.  Determine Whether the Email Should Be Signed and by
           Whom . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
     5.2.  Select a Private Key and Corresponding Selector
           Information  . . . . . . . . . . . . . . . . . . . . . . . 35
     5.3.  Normalize the Message to Prevent Transport Conversions . . 35
     5.4.  Determine the Header Fields to Sign  . . . . . . . . . . . 36
     5.5.  Recommended Signature Content  . . . . . . . . . . . . . . 38
     5.6.  Compute the Message Hash and Signature . . . . . . . . . . 39
     5.7.  Insert the DKIM-Signature Header Field . . . . . . . . . . 40
   6.  Verifier Actions . . . . . . . . . . . . . . . . . . . . . . . 40
     6.1.  Extract Signatures from the Message  . . . . . . . . . . . 41
     6.2.  Communicate Verification Results . . . . . . . . . . . . . 46
     6.3.  Interpret Results/Apply Local Policy . . . . . . . . . . . 47
   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 48
     7.1.  DKIM-Signature Tag Specifications  . . . . . . . . . . . . 48
     7.2.  DKIM-Signature Query Method Registry . . . . . . . . . . . 49
     7.3.  DKIM-Signature Canonicalization Registry . . . . . . . . . 49
     7.4.  _domainkey DNS TXT Record Tag Specifications . . . . . . . 50
     7.5.  DKIM Key Type Registry . . . . . . . . . . . . . . . . . . 50
     7.6.  DKIM Hash Algorithms Registry  . . . . . . . . . . . . . . 51
     7.7.  DKIM Service Types Registry  . . . . . . . . . . . . . . . 51
     7.8.  DKIM Selector Flags Registry . . . . . . . . . . . . . . . 52



Allman, et al.              Standards Track                     [Page 2]

RFC 4871                    DKIM Signatures                     May 2007


     7.9.  DKIM-Signature Header Field  . . . . . . . . . . . . . . . 52
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 52
     8.1.  Misuse of Body Length Limits ("l=" Tag)  . . . . . . . . . 52
     8.2.  Misappropriated Private Key  . . . . . . . . . . . . . . . 53
     8.3.  Key Server Denial-of-Service Attacks . . . . . . . . . . . 54
     8.4.  Attacks Against the DNS  . . . . . . . . . . . . . . . . . 54
     8.5.  Replay Attacks . . . . . . . . . . . . . . . . . . . . . . 55
     8.6.  Limits on Revoking Keys  . . . . . . . . . . . . . . . . . 55
     8.7.  Intentionally Malformed Key Records  . . . . . . . . . . . 56
     8.8.  Intentionally Malformed DKIM-Signature Header Fields . . . 56
     8.9.  Information Leakage  . . . . . . . . . . . . . . . . . . . 56
     8.10. Remote Timing Attacks  . . . . . . . . . . . . . . . . . . 56
     8.11. Reordered Header Fields  . . . . . . . . . . . . . . . . . 56
     8.12. RSA Attacks  . . . . . . . . . . . . . . . . . . . . . . . 56
     8.13. Inappropriate Signing by Parent Domains  . . . . . . . . . 57
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 57
     9.1.  Normative References . . . . . . . . . . . . . . . . . . . 57
     9.2.  Informative References . . . . . . . . . . . . . . . . . . 58
   Appendix A.  Example of Use (INFORMATIVE)  . . . . . . . . . . . . 60
     A.1.  The user composes an email . . . . . . . . . . . . . . . . 60
     A.2.  The email is signed  . . . . . . . . . . . . . . . . . . . 61
     A.3.  The email signature is verified  . . . . . . . . . . . . . 61
   Appendix B.  Usage Examples (INFORMATIVE)  . . . . . . . . . . . . 62
     B.1.  Alternate Submission Scenarios . . . . . . . . . . . . . . 63
     B.2.  Alternate Delivery Scenarios . . . . . . . . . . . . . . . 65
   Appendix C.  Creating a Public Key (INFORMATIVE) . . . . . . . . . 67
   Appendix D.  MUA Considerations  . . . . . . . . . . . . . . . . . 68
   Appendix E.  Acknowledgements  . . . . . . . . . . . . . . . . . . 69























Allman, et al.              Standards Track                     [Page 3]

RFC 4871                    DKIM Signatures                     May 2007


1.  Introduction

   DomainKeys Identified Mail (DKIM) defines a mechanism by which email
   messages can be cryptographically signed, permitting a signing domain
   to claim responsibility for the introduction of a message into the
   mail stream.  Message recipients can verify the signature by querying
   the signer's domain directly to retrieve the appropriate public key,
   and thereby confirm that the message was attested to by a party in
   possession of the private key for the signing domain.

   The approach taken by DKIM differs from previous approaches to
   message signing (e.g., Secure/Multipurpose Internet Mail Extensions
   (S/MIME) [RFC1847], OpenPGP [RFC2440]) in that:

   o  the message signature is written as a message header field so that
      neither human recipients nor existing MUA (Mail User Agent)
      software is confused by signature-related content appearing in the
      message body;

   o  there is no dependency on public and private key pairs being
      issued by well-known, trusted certificate authorities;

   o  there is no dependency on the deployment of any new Internet
      protocols or services for public key distribution or revocation;

   o  signature verification failure does not force rejection of the
      message;

   o  no attempt is made to include encryption as part of the mechanism;

   o  message archiving is not a design goal.

   DKIM:

   o  is compatible with the existing email infrastructure and
      transparent to the fullest extent possible;

   o  requires minimal new infrastructure;

   o  can be implemented independently of clients in order to reduce
      deployment time;

   o  can be deployed incrementally;

   o  allows delegation of signing to third parties.






Allman, et al.              Standards Track                     [Page 4]

RFC 4871                    DKIM Signatures                     May 2007


1.1.  Signing Identity

   DKIM separates the question of the identity of the signer of the
   message from the purported author of the message.  In particular, a
   signature includes the identity of the signer.  Verifiers can use the
   signing information to decide how they want to process the message.
   The signing identity is included as part of the signature header
   field.

      INFORMATIVE RATIONALE: The signing identity specified by a DKIM
      signature is not required to match an address in any particular
      header field because of the broad methods of interpretation by
      recipient mail systems, including MUAs.

1.2.  Scalability

   DKIM is designed to support the extreme scalability requirements that
   characterize the email identification problem.  There are currently
   over 70 million domains and a much larger number of individual
   addresses.  DKIM seeks to preserve the positive aspects of the
   current email infrastructure, such as the ability for anyone to
   communicate with anyone else without introduction.

1.3.  Simple Key Management

   DKIM differs from traditional hierarchical public-key systems in that
   no Certificate Authority infrastructure is required; the verifier
   requests the public key from a repository in the domain of the
   claimed signer directly rather than from a third party.

   The DNS is proposed as the initial mechanism for the public keys.
   Thus, DKIM currently depends on DNS administration and the security
   of the DNS system.  DKIM is designed to be extensible to other key
   fetching services as they become available.

2.  Terminology and Definitions

   This section defines terms used in the rest of the document.  Syntax
   descriptions use the form described in Augmented BNF for Syntax
   Specifications [RFC4234].

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].







Allman, et al.              Standards Track                     [Page 5]

RFC 4871                    DKIM Signatures                     May 2007


2.1.  Signers

   Elements in the mail system that sign messages on behalf of a domain
   are referred to as signers.  These may be MUAs (Mail User Agents),
   MSAs (Mail Submission Agents), MTAs (Mail Transfer Agents), or other
   agents such as mailing list exploders.  In general, any signer will
   be involved in the injection of a message into the message system in
   some way.  The key issue is that a message must be signed before it
   leaves the administrative domain of the signer.

2.2.  Verifiers

   Elements in the mail system that verify signatures are referred to as
   verifiers.  These may be MTAs, Mail Delivery Agents (MDAs), or MUAs.
   In most cases it is expected that verifiers will be close to an end
   user (reader) of the message or some consuming agent such as a
   mailing list exploder.

2.3.  Whitespace

   There are three forms of whitespace:

   o  WSP represents simple whitespace, i.e., a space or a tab character
      (formal definition in [RFC4234]).

   o  LWSP is linear whitespace, defined as WSP plus CRLF (formal
      definition in [RFC4234]).

   o  FWS is folding whitespace.  It allows multiple lines separated by
      CRLF followed by at least one whitespace, to be joined.

   The formal ABNF for these are (WSP and LWSP are given for information
   only):

       WSP =   SP / HTAB
       LWSP =  *(WSP / CRLF WSP)
       FWS =   [*WSP CRLF] 1*WSP

   The definition of FWS is identical to that in [RFC2822] except for
   the exclusion of obs-FWS.

2.4.  Common ABNF Tokens

   The following ABNF tokens are used elsewhere in this document:
     hyphenated-word =  ALPHA [ *(ALPHA / DIGIT / "-") (ALPHA / DIGIT) ]
     base64string =     1*(ALPHA / DIGIT / "+" / "/" / [FWS])
                        [ "=" [FWS] [ "=" [FWS] ] ]




Allman, et al.              Standards Track                     [Page 6]

RFC 4871                    DKIM Signatures                     May 2007


2.5.  Imported ABNF Tokens

   The following tokens are imported from other RFCs as noted.  Those
   RFCs should be considered definitive.

   The following tokens are imported from [RFC2821]:

   o  "Local-part" (implementation warning: this permits quoted strings)

   o  "sub-domain"

   The following tokens are imported from [RFC2822]:

   o  "field-name" (name of a header field)

   o  "dot-atom-text" (in the Local-part of an email address)

   The following tokens are imported from [RFC2045]:

   o  "qp-section" (a single line of quoted-printable-encoded text)

   o  "hex-octet" (a quoted-printable encoded octet)

      INFORMATIVE NOTE: Be aware that the ABNF in RFC 2045 does not obey
      the rules of RFC 4234 and must be interpreted accordingly,
      particularly as regards case folding.

   Other tokens not defined herein are imported from [RFC4234].  These
   are intuitive primitives such as SP, HTAB, WSP, ALPHA, DIGIT, CRLF,
   etc.

2.6.  DKIM-Quoted-Printable

   The DKIM-Quoted-Printable encoding syntax resembles that described in
   Quoted-Printable [RFC2045], Section 6.7: any character MAY be encoded
   as an "=" followed by two hexadecimal digits from the alphabet
   "0123456789ABCDEF" (no lowercase characters permitted) representing
   the hexadecimal-encoded integer value of that character.  All control
   characters (those with values < %x20), 8-bit characters (values >
   %x7F), and the characters DEL (%x7F), SPACE (%x20), and semicolon
   (";", %x3B) MUST be encoded.  Note that all whitespace, including
   SPACE, CR, and LF characters, MUST be encoded.  After encoding, FWS
   MAY be added at arbitrary locations in order to avoid excessively
   long lines; such whitespace is NOT part of the value, and MUST be
   removed before decoding.






Allman, et al.              Standards Track                     [Page 7]

RFC 4871                    DKIM Signatures                     May 2007


   ABNF:

       dkim-quoted-printable =
                          *(FWS / hex-octet / dkim-safe-char)
                     ; hex-octet is from RFC 2045
       dkim-safe-char =   %x21-3A / %x3C / %x3E-7E
                     ; '!' - ':', '<', '>' - '~'
                     ; Characters not listed as "mail-safe" in
                     ; RFC 2049 are also not recommended.

      INFORMATIVE NOTE: DKIM-Quoted-Printable differs from Quoted-
      Printable as defined in RFC 2045 in several important ways:

      1.  Whitespace in the input text, including CR and LF, must be
          encoded.  RFC 2045 does not require such encoding, and does
          not permit encoding of CR or LF characters that are part of a
          CRLF line break.

      2.  Whitespace in the encoded text is ignored.  This is to allow
          tags encoded using DKIM-Quoted-Printable to be wrapped as
          needed.  In particular, RFC 2045 requires that line breaks in
          the input be represented as physical line breaks; that is not
          the case here.

      3.  The "soft line break" syntax ("=" as the last non-whitespace
          character on the line) does not apply.

      4.  DKIM-Quoted-Printable does not require that encoded lines be
          no more than 76 characters long (although there may be other
          requirements depending on the context in which the encoded
          text is being used).

3.  Protocol Elements

   Protocol Elements are conceptual parts of the protocol that are not
   specific to either signers or verifiers.  The protocol descriptions
   for signers and verifiers are described in later sections (Signer
   Actions (Section 5) and Verifier Actions (Section 6)).  NOTE: This
   section must be read in the context of those sections.

3.1.  Selectors

   To support multiple concurrent public keys per signing domain, the
   key namespace is subdivided using "selectors".  For example,
   selectors might indicate the names of office locations (e.g.,
   "sanfrancisco", "coolumbeach", and "reykjavik"), the signing date
   (e.g., "january2005", "february2005", etc.), or even the individual
   user.



Allman, et al.              Standards Track                     [Page 8]

RFC 4871                    DKIM Signatures                     May 2007


   Selectors are needed to support some important use cases.  For
   example:

   o  Domains that want to delegate signing capability for a specific
      address for a given duration to a partner, such as an advertising
      provider or other outsourced function.

   o  Domains that want to allow frequent travelers to send messages
      locally without the need to connect with a particular MSA.

   o  "Affinity" domains (e.g., college alumni associations) that
      provide forwarding of incoming mail, but that do not operate a
      mail submission agent for outgoing mail.

   Periods are allowed in selectors and are component separators.  When
   keys are retrieved from the DNS, periods in selectors define DNS
   label boundaries in a manner similar to the conventional use in
   domain names.  Selector components might be used to combine dates
   with locations, for example, "march2005.reykjavik".  In a DNS
   implementation, this can be used to allow delegation of a portion of
   the selector namespace.

   ABNF:

      selector =   sub-domain *( "." sub-domain )

   The number of public keys and corresponding selectors for each domain
   is determined by the domain owner.  Many domain owners will be
   satisfied with just one selector, whereas administratively
   distributed organizations may choose to manage disparate selectors
   and key pairs in different regions or on different email servers.

   Beyond administrative convenience, selectors make it possible to
   seamlessly replace public keys on a routine basis.  If a domain
   wishes to change from using a public key associated with selector
   "january2005" to a public key associated with selector
   "february2005", it merely makes sure that both public keys are
   advertised in the public-key repository concurrently for the
   transition period during which email may be in transit prior to
   verification.  At the start of the transition period, the outbound
   email servers are configured to sign with the "february2005" private
   key.  At the end of the transition period, the "january2005" public
   key is removed from the public-key repository.

      INFORMATIVE NOTE: A key may also be revoked as described below.
      The distinction between revoking and removing a key selector
      record is subtle.  When phasing out keys as described above, a
      signing domain would probably simply remove the key record after



Allman, et al.              Standards Track                     [Page 9]

RFC 4871                    DKIM Signatures                     May 2007


      the transition period.  However, a signing domain could elect to
      revoke the key (but maintain the key record) for a further period.
      There is no defined semantic difference between a revoked key and
      a removed key.

   While some domains may wish to make selector values well known,
   others will want to take care not to allocate selector names in a way
   that allows harvesting of data by outside parties.  For example, if
   per-user keys are issued, the domain owner will need to make the
   decision as to whether to associate this selector directly with the
   user name, or make it some unassociated random value, such as a
   fingerprint of the public key.

      INFORMATIVE OPERATIONS NOTE: Reusing a selector with a new key
      (for example, changing the key associated with a user's name)
      makes it impossible to tell the difference between a message that
      didn't verify because the key is no longer valid versus a message
      that is actually forged.  For this reason, signers are ill-advised
      to reuse selectors for new keys.  A better strategy is to assign
      new keys to new selectors.

3.2.  Tag=Value Lists

   DKIM uses a simple "tag=value" syntax in several contexts, including
   in messages and domain signature records.

   Values are a series of strings containing either plain text, "base64"
   text (as defined in [RFC2045], Section 6.8), "qp-section" (ibid,
   Section 6.7), or "dkim-quoted-printable" (as defined in Section 2.6).
   The name of the tag will determine the encoding of each value.
   Unencoded semicolon (";") characters MUST NOT occur in the tag value,
   since that separates tag-specs.

      INFORMATIVE IMPLEMENTATION NOTE: Although the "plain text" defined
      below (as "tag-value") only includes 7-bit characters, an
      implementation that wished to anticipate future standards would be
      advised not to preclude the use of UTF8-encoded text in tag=value
      lists.













Allman, et al.              Standards Track                    [Page 10]

RFC 4871                    DKIM Signatures                     May 2007


   Formally, the syntax rules are as follows:

        tag-list  =  tag-spec 0*( ";" tag-spec ) [ ";" ]
        tag-spec  =  [FWS] tag-name [FWS] "=" [FWS] tag-value [FWS]
        tag-name  =  ALPHA 0*ALNUMPUNC
        tag-value =  [ tval 0*( 1*(WSP / FWS) tval ) ]
                          ; WSP and FWS prohibited at beginning and end
        tval      =  1*VALCHAR
        VALCHAR   =  %x21-3A / %x3C-7E
                          ; EXCLAMATION to TILDE except SEMICOLON
        ALNUMPUNC =  ALPHA / DIGIT / "_"

   Note that WSP is allowed anywhere around tags.  In particular, any
   WSP after the "=" and any WSP before the terminating ";" is not part
   of the value; however, WSP inside the value is significant.

   Tags MUST be interpreted in a case-sensitive manner.  Values MUST be
   processed as case sensitive unless the specific tag description of
   semantics specifies case insensitivity.

   Tags with duplicate names MUST NOT occur within a single tag-list; if
   a tag name does occur more than once, the entire tag-list is invalid.

   Whitespace within a value MUST be retained unless explicitly excluded
   by the specific tag description.

   Tag=value pairs that represent the default value MAY be included to
   aid legibility.

   Unrecognized tags MUST be ignored.

   Tags that have an empty value are not the same as omitted tags.  An
   omitted tag is treated as having the default value; a tag with an
   empty value explicitly designates the empty string as the value.  For
   example, "g=" does not mean "g=*", even though "g=*" is the default
   for that tag.

3.3.  Signing and Verification Algorithms

   DKIM supports multiple digital signature algorithms.  Two algorithms
   are defined by this specification at this time: rsa-sha1 and rsa-
   sha256.  The rsa-sha256 algorithm is the default if no algorithm is
   specified.  Verifiers MUST implement both rsa-sha1 and rsa-sha256.
   Signers MUST implement and SHOULD sign using rsa-sha256.







Allman, et al.              Standards Track                    [Page 11]

RFC 4871                    DKIM Signatures                     May 2007


      INFORMATIVE NOTE: Although sha256 is strongly encouraged, some
      senders of low-security messages (such as routine newsletters) may
      prefer to use sha1 because of reduced CPU requirements to compute
      a sha1 hash.  In general, sha256 should always be used whenever
      possible.

3.3.1.  The rsa-sha1 Signing Algorithm

   The rsa-sha1 Signing Algorithm computes a message hash as described
   in Section 3.7 below using SHA-1 [FIPS.180-2.2002] as the hash-alg.
   That hash is then signed by the signer using the RSA algorithm
   (defined in PKCS#1 version 1.5 [RFC3447]) as the crypt-alg and the
   signer's private key.  The hash MUST NOT be truncated or converted
   into any form other than the native binary form before being signed.
   The signing algorithm SHOULD use a public exponent of 65537.

3.3.2.  The rsa-sha256 Signing Algorithm

   The rsa-sha256 Signing Algorithm computes a message hash as described
   in Section 3.7 below using SHA-256 [FIPS.180-2.2002] as the hash-alg.
   That hash is then signed by the signer using the RSA algorithm
   (defined in PKCS#1 version 1.5 [RFC3447]) as the crypt-alg and the
   signer's private key.  The hash MUST NOT be truncated or converted
   into any form other than the native binary form before being signed.

3.3.3.  Key Sizes

   Selecting appropriate key sizes is a trade-off between cost,
   performance, and risk.  Since short RSA keys more easily succumb to
   off-line attacks, signers MUST use RSA keys of at least 1024 bits for
   long-lived keys.  Verifiers MUST be able to validate signatures with
   keys ranging from 512 bits to 2048 bits, and they MAY be able to
   validate signatures with larger keys.  Verifier policies may use the
   length of the signing key as one metric for determining whether a
   signature is acceptable.

   Factors that should influence the key size choice include the
   following:

   o  The practical constraint that large (e.g., 4096 bit) keys may not
      fit within a 512-byte DNS UDP response packet

   o  The security constraint that keys smaller than 1024 bits are
      subject to off-line attacks

   o  Larger keys impose higher CPU costs to verify and sign email





Allman, et al.              Standards Track                    [Page 12]

RFC 4871                    DKIM Signatures                     May 2007


   o  Keys can be replaced on a regular basis, thus their lifetime can
      be relatively short

   o  The security goals of this specification are modest compared to
      typical goals of other systems that employ digital signatures

   See [RFC3766] for further discussion on selecting key sizes.

3.3.4.  Other Algorithms

   Other algorithms MAY be defined in the future.  Verifiers MUST ignore
   any signatures using algorithms that they do not implement.

3.4.  Canonicalization

   Empirical evidence demonstrates that some mail servers and relay
   systems modify email in transit, potentially invalidating a
   signature.  There are two competing perspectives on such
   modifications.  For most signers, mild modification of email is
   immaterial to the authentication status of the email.  For such
   signers, a canonicalization algorithm that survives modest in-transit
   modification is preferred.

   Other signers demand that any modification of the email, however
   minor, result in a signature verification failure.  These signers
   prefer a canonicalization algorithm that does not tolerate in-transit
   modification of the signed email.

   Some signers may be willing to accept modifications to header fields
   that are within the bounds of email standards such as [RFC2822], but
   are unwilling to accept any modification to the body of messages.

   To satisfy all requirements, two canonicalization algorithms are
   defined for each of the header and the body: a "simple" algorithm
   that tolerates almost no modification and a "relaxed" algorithm that
   tolerates common modifications such as whitespace replacement and
   header field line rewrapping.  A signer MAY specify either algorithm
   for header or body when signing an email.  If no canonicalization
   algorithm is specified by the signer, the "simple" algorithm defaults
   for both header and body.  Verifiers MUST implement both
   canonicalization algorithms.  Note that the header and body may use
   different canonicalization algorithms.  Further canonicalization
   algorithms MAY be defined in the future; verifiers MUST ignore any
   signatures that use unrecognized canonicalization algorithms.

   Canonicalization simply prepares the email for presentation to the
   signing or verification algorithm.  It MUST NOT change the




Allman, et al.              Standards Track                    [Page 13]

RFC 4871                    DKIM Signatures                     May 2007


   transmitted data in any way.  Canonicalization of header fields and
   body are described below.

   NOTE: This section assumes that the message is already in "network
   normal" format (text is ASCII encoded, lines are separated with CRLF
   characters, etc.).  See also Section 5.3 for information about
   normalizing the message.

3.4.1.  The "simple" Header Canonicalization Algorithm

   The "simple" header canonicalization algorithm does not change header
   fields in any way.  Header fields MUST be presented to the signing or
   verification algorithm exactly as they are in the message being
   signed or verified.  In particular, header field names MUST NOT be
   case folded and whitespace MUST NOT be changed.

3.4.2.  The "relaxed" Header Canonicalization Algorithm

   The "relaxed" header canonicalization algorithm MUST apply the
   following steps in order:

   o  Convert all header field names (not the header field values) to
      lowercase.  For example, convert "SUBJect: AbC" to "subject: AbC".

   o  Unfold all header field continuation lines as described in
      [RFC2822]; in particular, lines with terminators embedded in
      continued header field values (that is, CRLF sequences followed by
      WSP) MUST be interpreted without the CRLF.  Implementations MUST
      NOT remove the CRLF at the end of the header field value.

   o  Convert all sequences of one or more WSP characters to a single SP
      character.  WSP characters here include those before and after a
      line folding boundary.

   o  Delete all WSP characters at the end of each unfolded header field
      value.

   o  Delete any WSP characters remaining before and after the colon
      separating the header field name from the header field value.  The
      colon separator MUST be retained.

3.4.3.  The "simple" Body Canonicalization Algorithm

   The "simple" body canonicalization algorithm ignores all empty lines
   at the end of the message body.  An empty line is a line of zero
   length after removal of the line terminator.  If there is no body or
   no trailing CRLF on the message body, a CRLF is added.  It makes no




Allman, et al.              Standards Track                    [Page 14]

RFC 4871                    DKIM Signatures                     May 2007


   other changes to the message body.  In more formal terms, the
   "simple" body canonicalization algorithm converts "0*CRLF" at the end
   of the body to a single "CRLF".

   Note that a completely empty or missing body is canonicalized as a
   single "CRLF"; that is, the canonicalized length will be 2 octets.

3.4.4.  The "relaxed" Body Canonicalization Algorithm

   The "relaxed" body canonicalization algorithm:

   o  Ignores all whitespace at the end of lines.  Implementations MUST
      NOT remove the CRLF at the end of the line.

   o  Reduces all sequences of WSP within a line to a single SP
      character.

   o  Ignores all empty lines at the end of the message body.  "Empty
      line" is defined in Section 3.4.3.

      INFORMATIVE NOTE: It should be noted that the relaxed body
      canonicalization algorithm may enable certain types of extremely
      crude "ASCII Art" attacks where a message may be conveyed by
      adjusting the spacing between words.  If this is a concern, the
      "simple" body canonicalization algorithm should be used instead.

3.4.5.  Body Length Limits

   A body length count MAY be specified to limit the signature
   calculation to an initial prefix of the body text, measured in
   octets.  If the body length count is not specified, the entire
   message body is signed.

      INFORMATIVE RATIONALE: This capability is provided because it is
      very common for mailing lists to add trailers to messages (e.g.,
      instructions how to get off the list).  Until those messages are
      also signed, the body length count is a useful tool for the
      verifier since it may as a matter of policy accept messages having
      valid signatures with extraneous data.

      INFORMATIVE IMPLEMENTATION NOTE: Using body length limits enables
      an attack in which an attacker modifies a message to include
      content that solely benefits the attacker.  It is possible for the
      appended content to completely replace the original content in the
      end recipient's eyes and to defeat duplicate message detection
      algorithms.  To avoid this attack, signers should be wary of using





Allman, et al.              Standards Track                    [Page 15]

RFC 4871                    DKIM Signatures                     May 2007


      this tag, and verifiers might wish to ignore the tag or remove
      text that appears after the specified content length, perhaps
      based on other criteria.

   The body length count allows the signer of a message to permit data
   to be appended to the end of the body of a signed message.  The body
   length count MUST be calculated following the canonicalization
   algorithm; for example, any whitespace ignored by a canonicalization
   algorithm is not included as part of the body length count.  Signers
   of MIME messages that include a body length count SHOULD be sure that
   the length extends to the closing MIME boundary string.

      INFORMATIVE IMPLEMENTATION NOTE: A signer wishing to ensure that
      the only acceptable modifications are to add to the MIME postlude
      would use a body length count encompassing the entire final MIME
      boundary string, including the final "--CRLF".  A signer wishing
      to allow additional MIME parts but not modification of existing
      parts would use a body length count extending through the final
      MIME boundary string, omitting the final "--CRLF".  Note that this
      only works for some MIME types, e.g., multipart/mixed but not
      multipart/signed.

   A body length count of zero means that the body is completely
   unsigned.

   Signers wishing to ensure that no modification of any sort can occur
   should specify the "simple" canonicalization algorithm for both
   header and body and omit the body length count.

3.4.6.  Canonicalization Examples (INFORMATIVE)

   In the following examples, actual whitespace is used only for
   clarity.  The actual input and output text is designated using
   bracketed descriptors: "<SP>" for a space character, "<HTAB>" for a
   tab character, and "<CRLF>" for a carriage-return/line-feed sequence.
   For example, "X <SP> Y" and "X<SP>Y" represent the same three
   characters.

   Example 1: A message reading:

       A: <SP> X <CRLF>
       B <SP> : <SP> Y <HTAB><CRLF>
       <HTAB> Z <SP><SP><CRLF>
       <CRLF>
       <SP> C <SP><CRLF>
       D <SP><HTAB><SP> E <CRLF>
       <CRLF>
       <CRLF>



Allman, et al.              Standards Track                    [Page 16]

RFC 4871                    DKIM Signatures                     May 2007


   when canonicalized using relaxed canonicalization for both header and
   body results in a header reading:

       a:X <CRLF>
       b:Y <SP> Z <CRLF>

   and a body reading:

       <SP> C <CRLF>
       D <SP> E <CRLF>

   Example 2: The same message canonicalized using simple
   canonicalization for both header and body results in a header
   reading:

       A: <SP> X <CRLF>
       B <SP> : <SP> Y <HTAB><CRLF>
       <HTAB> Z <SP><SP><CRLF>

   and a body reading:

       <SP> C <SP><CRLF>
       D <SP><HTAB><SP> E <CRLF>

   Example 3: When processed using relaxed header canonicalization and
   simple body canonicalization, the canonicalized version has a header
   of:

       a:X <CRLF>
       b:Y <SP> Z <CRLF>

   and a body reading:

       <SP> C <SP><CRLF>
       D <SP><HTAB><SP> E <CRLF>

3.5.  The DKIM-Signature Header Field

   The signature of the email is stored in the DKIM-Signature header
   field.  This header field contains all of the signature and key-
   fetching data.  The DKIM-Signature value is a tag-list as described
   in Section 3.2.

   The DKIM-Signature header field SHOULD be treated as though it were a
   trace header field as defined in Section 3.6 of [RFC2822], and hence
   SHOULD NOT be reordered and SHOULD be prepended to the message.





Allman, et al.              Standards Track                    [Page 17]

RFC 4871                    DKIM Signatures                     May 2007


   The DKIM-Signature header field being created or verified is always
   included in the signature calculation, after the rest of the header
   fields being signed; however, when calculating or verifying the
   signature, the value of the "b=" tag (signature value) of that DKIM-
   Signature header field MUST be treated as though it were an empty
   string.  Unknown tags in the DKIM-Signature header field MUST be
   included in the signature calculation but MUST be otherwise ignored
   by verifiers.  Other DKIM-Signature header fields that are included
   in the signature should be treated as normal header fields; in
   particular, the "b=" tag is not treated specially.

   The encodings for each field type are listed below.  Tags described
   as qp-section are encoded as described in Section 6.7 of MIME Part
   One [RFC2045], with the additional conversion of semicolon characters
   to "=3B"; intuitively, this is one line of quoted-printable encoded
   text.  The dkim-quoted-printable syntax is defined in Section 2.6.

   Tags on the DKIM-Signature header field along with their type and
   requirement status are shown below.  Unrecognized tags MUST be
   ignored.

   v=  Version (MUST be included).  This tag defines the version of this
       specification that applies to the signature record.  It MUST have
       the value "1".  Note that verifiers must do a string comparison
       on this value; for example, "1" is not the same as "1.0".

   ABNF:

       sig-v-tag   = %x76 [FWS] "=" [FWS] "1"

           INFORMATIVE NOTE: DKIM-Signature version numbers are expected
           to increase arithmetically as new versions of this
           specification are released.

   a=  The algorithm used to generate the signature (plain-text;
       REQUIRED).  Verifiers MUST support "rsa-sha1" and "rsa-sha256";
       signers SHOULD sign using "rsa-sha256".  See Section 3.3 for a
       description of algorithms.

   ABNF:

       sig-a-tag       = %x61 [FWS] "=" [FWS] sig-a-tag-alg
       sig-a-tag-alg   = sig-a-tag-k "-" sig-a-tag-h
       sig-a-tag-k     = "rsa" / x-sig-a-tag-k
       sig-a-tag-h     = "sha1" / "sha256" / x-sig-a-tag-h
       x-sig-a-tag-k   = ALPHA *(ALPHA / DIGIT)   ; for later extension
       x-sig-a-tag-h   = ALPHA *(ALPHA / DIGIT)   ; for later extension




Allman, et al.              Standards Track                    [Page 18]

RFC 4871                    DKIM Signatures                     May 2007


   b=  The signature data (base64; REQUIRED).  Whitespace is ignored in
       this value and MUST be ignored when reassembling the original
       signature.  In particular, the signing process can safely insert
       FWS in this value in arbitrary places to conform to line-length
       limits.  See Signer Actions (Section 5) for how the signature is
       computed.

   ABNF:

       sig-b-tag       = %x62 [FWS] "=" [FWS] sig-b-tag-data
       sig-b-tag-data  = base64string

   bh= The hash of the canonicalized body part of the message as limited
       by the "l=" tag (base64; REQUIRED).  Whitespace is ignored in
       this value and MUST be ignored when reassembling the original
       signature.  In particular, the signing process can safely insert
       FWS in this value in arbitrary places to conform to line-length
       limits.  See Section 3.7 for how the body hash is computed.

   ABNF:

       sig-bh-tag      = %x62 %x68 [FWS] "=" [FWS] sig-bh-tag-data
       sig-bh-tag-data = base64string

   c=  Message canonicalization (plain-text; OPTIONAL, default is
       "simple/simple").  This tag informs the verifier of the type of
       canonicalization used to prepare the message for signing.  It
       consists of two names separated by a "slash" (%d47) character,
       corresponding to the header and body canonicalization algorithms
       respectively.  These algorithms are described in Section 3.4.  If
       only one algorithm is named, that algorithm is used for the
       header and "simple" is used for the body.  For example,
       "c=relaxed" is treated the same as "c=relaxed/simple".

   ABNF:

       sig-c-tag       = %x63 [FWS] "=" [FWS] sig-c-tag-alg
                     ["/" sig-c-tag-alg]
       sig-c-tag-alg   = "simple" / "relaxed" / x-sig-c-tag-alg
       x-sig-c-tag-alg = hyphenated-word    ; for later extension

   d=  The domain of the signing entity (plain-text; REQUIRED).  This is
       the domain that will be queried for the public key.  This domain
       MUST be the same as or a parent domain of the "i=" tag (the
       signing identity, as described below), or it MUST meet the
       requirements for parent domain signing described in Section 3.8.
       When presented with a signature that does not meet these
       requirement, verifiers MUST consider the signature invalid.



Allman, et al.              Standards Track                    [Page 19]

RFC 4871                    DKIM Signatures                     May 2007


   Internationalized domain names MUST be encoded as described in
       [RFC3490].

   ABNF:

       sig-d-tag       = %x64 [FWS] "=" [FWS] domain-name
       domain-name     = sub-domain 1*("." sub-domain)
                ; from RFC 2821 Domain, but excluding address-literal

   h=  Signed header fields (plain-text, but see description; REQUIRED).
       A colon-separated list of header field names that identify the
       header fields presented to the signing algorithm.  The field MUST
       contain the complete list of header fields in the order presented
       to the signing algorithm.  The field MAY contain names of header
       fields that do not exist when signed; nonexistent header fields
       do not contribute to the signature computation (that is, they are
       treated as the null input, including the header field name, the
       separating colon, the header field value, and any CRLF
       terminator).  The field MUST NOT include the DKIM-Signature
       header field that is being created or verified, but may include
       others.  Folding whitespace (FWS) MAY be included on either side
       of the colon separator.  Header field names MUST be compared
       against actual header field names in a case-insensitive manner.
       This list MUST NOT be empty.  See Section 5.4 for a discussion of
       choosing header fields to sign.

   ABNF:

       sig-h-tag       = %x68 [FWS] "=" [FWS] hdr-name
                     0*( *FWS ":" *FWS hdr-name )
       hdr-name        = field-name

       INFORMATIVE EXPLANATION: By "signing" header fields that do not
           actually exist, a signer can prevent insertion of those
           header fields before verification.  However, since a signer
           cannot possibly know what header fields might be created in
           the future, and that some MUAs might present header fields
           that are embedded inside a message (e.g., as a message/rfc822
           content type), the security of this solution is not total.

       INFORMATIVE EXPLANATION: The exclusion of the header field name
           and colon as well as the header field value for non-existent
           header fields prevents an attacker from inserting an actual
           header field with a null value.







Allman, et al.              Standards Track                    [Page 20]

RFC 4871                    DKIM Signatures                     May 2007


   i=  Identity of the user or agent (e.g., a mailing list manager) on
       behalf of which this message is signed (dkim-quoted-printable;
       OPTIONAL, default is an empty Local-part followed by an "@"
       followed by the domain from the "d=" tag).  The syntax is a
       standard email address where the Local-part MAY be omitted.  The
       domain part of the address MUST be the same as or a subdomain of
       the value of the "d=" tag.

   Internationalized domain names MUST be converted using the steps
       listed in Section 4 of [RFC3490] using the "ToASCII" function.

   ABNF:

       sig-i-tag =   %x69 [FWS] "=" [FWS] [ Local-part ] "@" domain-name

       INFORMATIVE NOTE: The Local-part of the "i=" tag is optional
           because in some cases a signer may not be able to establish a
           verified individual identity.  In such cases, the signer may
           wish to assert that although it is willing to go as far as
           signing for the domain, it is unable or unwilling to commit
           to an individual user name within their domain.  It can do so
           by including the domain part but not the Local-part of the
           identity.

       INFORMATIVE DISCUSSION: This document does not require the value
           of the "i=" tag to match the identity in any message header
           fields.  This is considered to be a verifier policy issue.
           Constraints between the value of the "i=" tag and other
           identities in other header fields seek to apply basic
           authentication into the semantics of trust associated with a
           role such as content author.  Trust is a broad and complex
           topic and trust mechanisms are subject to highly creative
           attacks.  The real-world efficacy of any but the most basic
           bindings between the "i=" value and other identities is not
           well established, nor is its vulnerability to subversion by
           an attacker.  Hence reliance on the use of these options
           should be strictly limited.  In particular, it is not at all
           clear to what extent a typical end-user recipient can rely on
           any assurances that might be made by successful use of the
           "i=" options.

   l=  Body length count (plain-text unsigned decimal integer; OPTIONAL,
       default is entire body).  This tag informs the verifier of the
       number of octets in the body of the email after canonicalization
       included in the cryptographic hash, starting from 0 immediately
       following the CRLF preceding the body.  This value MUST NOT be
       larger than the actual number of octets in the canonicalized
       message body.



Allman, et al.              Standards Track                    [Page 21]

RFC 4871                    DKIM Signatures                     May 2007


       INFORMATIVE IMPLEMENTATION WARNING: Use of the "l=" tag might
           allow display of fraudulent content without appropriate
           warning to end users.  The "l=" tag is intended for
           increasing signature robustness when sending to mailing lists
           that both modify their content and do not sign their
           messages.  However, using the "l=" tag enables attacks in
           which an intermediary with malicious intent modifies a
           message to include content that solely benefits the attacker.
           It is possible for the appended content to completely replace
           the original content in the end recipient's eyes and to
           defeat duplicate message detection algorithms.  Examples are
           described in Security Considerations (Section 8).  To avoid
           this attack, signers should be extremely wary of using this
           tag, and verifiers might wish to ignore the tag or remove
           text that appears after the specified content length.

       INFORMATIVE NOTE: The value of the "l=" tag is constrained to 76
           decimal digits.  This constraint is not intended to predict
           the size of future messages or to require implementations to
           use an integer representation large enough to represent the
           maximum possible value, but is intended to remind the
           implementer to check the length of this and all other tags
           during verification and to test for integer overflow when
           decoding the value.  Implementers may need to limit the
           actual value expressed to a value smaller than 10^76, e.g.,
           to allow a message to fit within the available storage space.

   ABNF:

   sig-l-tag    = %x6c [FWS] "=" [FWS] 1*76DIGIT

   q=  A colon-separated list of query methods used to retrieve the
       public key (plain-text; OPTIONAL, default is "dns/txt").  Each
       query method is of the form "type[/options]", where the syntax
       and semantics of the options depend on the type and specified
       options.  If there are multiple query mechanisms listed, the
       choice of query mechanism MUST NOT change the interpretation of
       the signature.  Implementations MUST use the recognized query
       mechanisms in the order presented.

   Currently, the only valid value is "dns/txt", which defines the DNS
       TXT record lookup algorithm described elsewhere in this document.
       The only option defined for the "dns" query type is "txt", which
       MUST be included.  Verifiers and signers MUST support "dns/txt".







Allman, et al.              Standards Track                    [Page 22]

RFC 4871                    DKIM Signatures                     May 2007


   ABNF:

       sig-q-tag        = %x71 [FWS] "=" [FWS] sig-q-tag-method
                      *([FWS] ":" [FWS] sig-q-tag-method)
       sig-q-tag-method = "dns/txt" / x-sig-q-tag-type
                      ["/" x-sig-q-tag-args]
       x-sig-q-tag-type = hyphenated-word  ; for future extension
       x-sig-q-tag-args = qp-hdr-value

   s=  The selector subdividing the namespace for the "d=" (domain) tag
       (plain-text; REQUIRED).

   ABNF:

       sig-s-tag    = %x73 [FWS] "=" [FWS] selector

   t=  Signature Timestamp (plain-text unsigned decimal integer;
       RECOMMENDED, default is an unknown creation time).  The time that
       this signature was created.  The format is the number of seconds
       since 00:00:00 on January 1, 1970 in the UTC time zone.  The
       value is expressed as an unsigned integer in decimal ASCII.  This
       value is not constrained to fit into a 31- or 32-bit integer.
       Implementations SHOULD be prepared to handle values up to at
       least 10^12 (until approximately AD 200,000; this fits into 40
       bits).  To avoid denial-of-service attacks, implementations MAY
       consider any value longer than 12 digits to be infinite.  Leap
       seconds are not counted.  Implementations MAY ignore signatures
       that have a timestamp in the future.

   ABNF:

       sig-t-tag    = %x74 [FWS] "=" [FWS] 1*12DIGIT

   x=  Signature Expiration (plain-text unsigned decimal integer;
       RECOMMENDED, default is no expiration).  The format is the same
       as in the "t=" tag, represented as an absolute date, not as a
       time delta from the signing timestamp.  The value is expressed as
       an unsigned integer in decimal ASCII, with the same constraints
       on the value in the "t=" tag.  Signatures MAY be considered
       invalid if the verification time at the verifier is past the
       expiration date.  The verification time should be the time that
       the message was first received at the administrative domain of
       the verifier if that time is reliably available; otherwise the
       current time should be used.  The value of the "x=" tag MUST be
       greater than the value of the "t=" tag if both are present.






Allman, et al.              Standards Track                    [Page 23]

RFC 4871                    DKIM Signatures                     May 2007


       INFORMATIVE NOTE: The "x=" tag is not intended as an anti-replay
           defense.

   ABNF:

       sig-x-tag    = %x78 [FWS] "=" [FWS] 1*12DIGIT

   z=  Copied header fields (dkim-quoted-printable, but see description;
       OPTIONAL, default is null).  A vertical-bar-separated list of
       selected header fields present when the message was signed,
       including both the field name and value.  It is not required to
       include all header fields present at the time of signing.  This
       field need not contain the same header fields listed in the "h="
       tag.  The header field text itself must encode the vertical bar
       ("|", %x7C) character (i.e., vertical bars in the "z=" text are
       metacharacters, and any actual vertical bar characters in a
       copied header field must be encoded).  Note that all whitespace
       must be encoded, including whitespace between the colon and the
       header field value.  After encoding, FWS MAY be added at
       arbitrary locations in order to avoid excessively long lines;
       such whitespace is NOT part of the value of the header field, and
       MUST be removed before decoding.

   The header fields referenced by the "h=" tag refer to the fields in
       the RFC 2822 header of the message, not to any copied fields in
       the "z=" tag.  Copied header field values are for diagnostic use.

   Header fields with characters requiring conversion (perhaps from
       legacy MTAs that are not [RFC2822] compliant) SHOULD be converted
       as described in MIME Part Three [RFC2047].

   ABNF:
       sig-z-tag      = %x7A [FWS] "=" [FWS] sig-z-tag-copy
                    *( [FWS] "|" sig-z-tag-copy )
   sig-z-tag-copy = hdr-name ":" qp-hdr-value
   qp-hdr-value   = dkim-quoted-printable    ; with "|" encoded

      INFORMATIVE EXAMPLE of a signature header field spread across
      multiple continuation lines:












Allman, et al.              Standards Track                    [Page 24]

RFC 4871                    DKIM Signatures                     May 2007


   DKIM-Signature: a=rsa-sha256; d=example.net; s=brisbane;
      c=simple; q=dns/txt; i=@eng.example.net;
      t=1117574938; x=1118006938;
      h=from:to:subject:date;
      z=From:foo@eng.example.net|To:joe@example.com|
        Subject:demo=20run|Date:July=205,=202005=203:44:08=20PM=20-0700;
      bh=MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=;
      b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ
               VoG4ZHRNiYzR

3.6.  Key Management and Representation

   Signature applications require some level of assurance that the
   verification public key is associated with the claimed signer.  Many
   applications achieve this by using public key certificates issued by
   a trusted third party.  However, DKIM can achieve a sufficient level
   of security, with significantly enhanced scalability, by simply
   having the verifier query the purported signer's DNS entry (or some
   security-equivalent) in order to retrieve the public key.

   DKIM keys can potentially be stored in multiple types of key servers
   and in multiple formats.  The storage and format of keys are
   irrelevant to the remainder of the DKIM algorithm.

   Parameters to the key lookup algorithm are the type of the lookup
   (the "q=" tag), the domain of the signer (the "d=" tag of the DKIM-
   Signature header field), and the selector (the "s=" tag).

       public_key = dkim_find_key(q_val, d_val, s_val)

   This document defines a single binding, using DNS TXT records to
   distribute the keys.  Other bindings may be defined in the future.

3.6.1.  Textual Representation

   It is expected that many key servers will choose to present the keys
   in an otherwise unstructured text format (for example, an XML form
   would not be considered to be unstructured text for this purpose).
   The following definition MUST be used for any DKIM key represented in
   an otherwise unstructured textual form.

   The overall syntax is a tag-list as described in Section 3.2.  The
   current valid tags are described below.  Other tags MAY be present
   and MUST be ignored by any implementation that does not understand
   them.






Allman, et al.              Standards Track                    [Page 25]

RFC 4871                    DKIM Signatures                     May 2007


   v=  Version of the DKIM key record (plain-text; RECOMMENDED, default
       is "DKIM1").  If specified, this tag MUST be set to "DKIM1"
       (without the quotes).  This tag MUST be the first tag in the
       record.  Records beginning with a "v=" tag with any other value
       MUST be discarded.  Note that verifiers must do a string
       comparison on this value; for example, "DKIM1" is not the same as
       "DKIM1.0".

       ABNF:

       key-v-tag    = %x76 [FWS] "=" [FWS] "DKIM1"

   g=  Granularity of the key (plain-text; OPTIONAL, default is "*").
       This value MUST match the Local-part of the "i=" tag of the DKIM-
       Signature header field (or its default value of the empty string
       if "i=" is not specified), with a single, optional "*" character
       matching a sequence of zero or more arbitrary characters
       ("wildcarding").  An email with a signing address that does not
       match the value of this tag constitutes a failed verification.
       The intent of this tag is to constrain which signing address can
       legitimately use this selector, for example, when delegating a
       key to a third party that should only be used for special
       purposes.  Wildcarding allows matching for addresses such as
       "user+*" or "*-offer".  An empty "g=" value never matches any
       addresses.

   ABNF:

       key-g-tag       = %x67 [FWS] "=" [FWS] key-g-tag-lpart
       key-g-tag-lpart = [dot-atom-text] ["*" [dot-atom-text] ]

   h=  Acceptable hash algorithms (plain-text; OPTIONAL, defaults to
       allowing all algorithms).  A colon-separated list of hash
       algorithms that might be used.  Signers and Verifiers MUST
       support the "sha256" hash algorithm.  Verifiers MUST also support
       the "sha1" hash algorithm.

       ABNF:

       key-h-tag       = %x68 [FWS] "=" [FWS] key-h-tag-alg
                     0*( [FWS] ":" [FWS] key-h-tag-alg )
       key-h-tag-alg   = "sha1" / "sha256" / x-key-h-tag-alg
       x-key-h-tag-alg = hyphenated-word   ; for future extension








Allman, et al.              Standards Track                    [Page 26]

RFC 4871                    DKIM Signatures                     May 2007


   k=  Key type (plain-text; OPTIONAL, default is "rsa").  Signers and
       verifiers MUST support the "rsa" key type.  The "rsa" key type
       indicates that an ASN.1 DER-encoded [ITU.X660.1997] RSAPublicKey
       [RFC3447] (see Sections 3.1 and A.1.1) is being used in the "p="
       tag.  (Note: the "p=" tag further encodes the value using the
       base64 algorithm.)

       ABNF:

       key-k-tag        = %x76 [FWS] "=" [FWS] key-k-tag-type
       key-k-tag-type   = "rsa" / x-key-k-tag-type
       x-key-k-tag-type = hyphenated-word   ; for future extension

   n=  Notes that might be of interest to a human (qp-section; OPTIONAL,
       default is empty).  No interpretation is made by any program.
       This tag should be used sparingly in any key server mechanism
       that has space limitations (notably DNS).  This is intended for
       use by administrators, not end users.

   ABNF:

       key-n-tag    = %x6e [FWS] "=" [FWS] qp-section

   p=  Public-key data (base64; REQUIRED).  An empty value means that
       this public key has been revoked.  The syntax and semantics of
       this tag value before being encoded in base64 are defined by the
       "k=" tag.

           INFORMATIVE RATIONALE: If a private key has been compromised
           or otherwise disabled (e.g., an outsourcing contract has been
           terminated), a signer might want to explicitly state that it
           knows about the selector, but all messages using that
           selector should fail verification.  Verifiers should ignore
           any DKIM-Signature header fields with a selector referencing
           a revoked key.

   ABNF:

       key-p-tag    = %x70 [FWS] "=" [ [FWS] base64string ]

       INFORMATIVE NOTE: A base64string is permitted to include white
           space (FWS) at arbitrary places; however, any CRLFs must be
           followed by at least one WSP character.  Implementors and
           administrators are cautioned to ensure that selector TXT
           records conform to this specification.






Allman, et al.              Standards Track                    [Page 27]

RFC 4871                    DKIM Signatures                     May 2007


   s=  Service Type (plain-text; OPTIONAL; default is "*").  A colon-
       separated list of service types to which this record applies.
       Verifiers for a given service type MUST ignore this record if the
       appropriate type is not listed.  Currently defined service types
       are as follows:

       *   matches all service types

       email   electronic mail (not necessarily limited to SMTP)

       This tag is intended to constrain the use of keys for other
       purposes, should use of DKIM be defined by other services in the
       future.

   ABNF:

       key-s-tag        = %x73 [FWS] "=" [FWS] key-s-tag-type
                       0*( [FWS] ":" [FWS] key-s-tag-type )
       key-s-tag-type   = "email" / "*" / x-key-s-tag-type
       x-key-s-tag-type = hyphenated-word   ; for future extension

   t=  Flags, represented as a colon-separated list of names (plain-
       text; OPTIONAL, default is no flags set).  The defined flags are
       as follows:

       y   This domain is testing DKIM.  Verifiers MUST NOT treat
           messages from signers in testing mode differently from
           unsigned email, even should the signature fail to verify.
           Verifiers MAY wish to track testing mode results to assist
           the signer.

       s   Any DKIM-Signature header fields using the "i=" tag MUST have
           the same domain value on the right-hand side of the "@" in
           the "i=" tag and the value of the "d=" tag.  That is, the
           "i=" domain MUST NOT be a subdomain of "d=".  Use of this
           flag is RECOMMENDED unless subdomaining is required.

   ABNF:

       key-t-tag        = %x74 [FWS] "=" [FWS] key-t-tag-flag
                      0*( [FWS] ":" [FWS] key-t-tag-flag )
       key-t-tag-flag   = "y" / "s" / x-key-t-tag-flag
       x-key-t-tag-flag = hyphenated-word   ; for future extension

   Unrecognized flags MUST be ignored.






Allman, et al.              Standards Track                    [Page 28]

RFC 4871                    DKIM Signatures                     May 2007


3.6.2.  DNS Binding

   A binding using DNS TXT records as a key service is hereby defined.
   All implementations MUST support this binding.

3.6.2.1.  Namespace

   All DKIM keys are stored in a subdomain named "_domainkey".  Given a
   DKIM-Signature field with a "d=" tag of "example.com" and an "s=" tag
   of "foo.bar", the DNS query will be for
   "foo.bar._domainkey.example.com".

      INFORMATIVE OPERATIONAL NOTE: Wildcard DNS records (e.g.,
      *.bar._domainkey.example.com) do not make sense in this context
      and should not be used.  Note also that wildcards within domains
      (e.g., s._domainkey.*.example.com) are not supported by the DNS.

3.6.2.2.  Resource Record Types for Key Storage

   The DNS Resource Record type used is specified by an option to the
   query-type ("q=") tag.  The only option defined in this base
   specification is "txt", indicating the use of a TXT Resource Record
   (RR).  A later extension of this standard may define another RR type.

   Strings in a TXT RR MUST be concatenated together before use with no
   intervening whitespace.  TXT RRs MUST be unique for a particular
   selector name; that is, if there are multiple records in an RRset,
   the results are undefined.

   TXT RRs are encoded as described in Section 3.6.1.

3.7.  Computing the Message Hashes

   Both signing and verifying message signatures start with a step of
   computing two cryptographic hashes over the message.  Signers will
   choose the parameters of the signature as described in Signer Actions
   (Section 5); verifiers will use the parameters specified in the DKIM-
   Signature header field being verified.  In the following discussion,
   the names of the tags in the DKIM-Signature header field that either
   exists (when verifying) or will be created (when signing) are used.
   Note that canonicalization (Section 3.4) is only used to prepare the
   email for signing or verifying; it does not affect the transmitted
   email in any way.

   The signer/verifier MUST compute two hashes, one over the body of the
   message and one over the selected header fields of the message.





Allman, et al.              Standards Track                    [Page 29]

RFC 4871                    DKIM Signatures                     May 2007


   Signers MUST compute them in the order shown.  Verifiers MAY compute
   them in any order convenient to the verifier, provided that the
   result is semantically identical to the semantics that would be the
   case had they been computed in this order.

   In hash step 1, the signer/verifier MUST hash the message body,
   canonicalized using the body canonicalization algorithm specified in
   the "c=" tag and then truncated to the length specified in the "l="
   tag.  That hash value is then converted to base64 form and inserted
   into (signers) or compared to (verifiers) the "bh=" tag of the DKIM-
   Signature header field.

   In hash step 2, the signer/verifier MUST pass the following to the
   hash algorithm in the indicated order.

   1.  The header fields specified by the "h=" tag, in the order
       specified in that tag, and canonicalized using the header
       canonicalization algorithm specified in the "c=" tag.  Each
       header field MUST be terminated with a single CRLF.

   2.  The DKIM-Signature header field that exists (verifying) or will
       be inserted (signing) in the message, with the value of the "b="
       tag deleted (i.e., treated as the empty string), canonicalized
       using the header canonicalization algorithm specified in the "c="
       tag, and without a trailing CRLF.

   All tags and their values in the DKIM-Signature header field are
   included in the cryptographic hash with the sole exception of the
   value portion of the "b=" (signature) tag, which MUST be treated as
   the null string.  All tags MUST be included even if they might not be
   understood by the verifier.  The header field MUST be presented to
   the hash algorithm after the body of the message rather than with the
   rest of the header fields and MUST be canonicalized as specified in
   the "c=" (canonicalization) tag.  The DKIM-Signature header field
   MUST NOT be included in its own h= tag, although other DKIM-Signature
   header fields MAY be signed (see Section 4).

   When calculating the hash on messages that will be transmitted using
   base64 or quoted-printable encoding, signers MUST compute the hash
   after the encoding.  Likewise, the verifier MUST incorporate the
   values into the hash before decoding the base64 or quoted-printable
   text.  However, the hash MUST be computed before transport level
   encodings such as SMTP "dot-stuffing" (the modification of lines
   beginning with a "." to avoid confusion with the SMTP end-of-message
   marker, as specified in [RFC2821]).

   With the exception of the canonicalization procedure described in
   Section 3.4, the DKIM signing process treats the body of messages as



Allman, et al.              Standards Track                    [Page 30]

RFC 4871                    DKIM Signatures                     May 2007


   simply a string of octets.  DKIM messages MAY be either in plain-text
   or in MIME format; no special treatment is afforded to MIME content.
   Message attachments in MIME format MUST be included in the content
   that is signed.

   More formally, the algorithm for the signature is as follows:
       body-hash = hash-alg(canon_body)
       header-hash = hash-alg(canon_header || DKIM-SIG)
       signature = sig-alg(header-hash, key)

   where "sig-alg" is the signature algorithm specified by the "a=" tag,
   "hash-alg" is the hash algorithm specified by the "a=" tag,
   "canon_header" and "canon_body" are the canonicalized message header
   and body (respectively) as defined in Section 3.4 (excluding the
   DKIM-Signature header field), and "DKIM-SIG" is the canonicalized
   DKIM-Signature header field sans the signature value itself, but with
   "body-hash" included as the "bh=" tag.

      INFORMATIVE IMPLEMENTERS' NOTE: Many digital signature APIs
      provide both hashing and application of the RSA private key using
      a single "sign()" primitive.  When using such an API, the last two
      steps in the algorithm would probably be combined into a single
      call that would perform both the "hash-alg" and the "sig-alg".

3.8.  Signing by Parent Domains

   In some circumstances, it is desirable for a domain to apply a
   signature on behalf of any of its subdomains without the need to
   maintain separate selectors (key records) in each subdomain.  By
   default, private keys corresponding to key records can be used to
   sign messages for any subdomain of the domain in which they reside;
   e.g., a key record for the domain example.com can be used to verify
   messages where the signing identity ("i=" tag of the signature) is
   sub.example.com, or even sub1.sub2.example.com.  In order to limit
   the capability of such keys when this is not intended, the "s" flag
   may be set in the "t=" tag of the key record to constrain the
   validity of the record to exactly the domain of the signing identity.
   If the referenced key record contains the "s" flag as part of the
   "t=" tag, the domain of the signing identity ("i=" flag) MUST be the
   same as that of the d= domain.  If this flag is absent, the domain of
   the signing identity MUST be the same as, or a subdomain of, the d=
   domain.  Key records that are not intended for use with subdomains
   SHOULD specify the "s" flag in the "t=" tag.








Allman, et al.              Standards Track                    [Page 31]

RFC 4871                    DKIM Signatures                     May 2007


4.  Semantics of Multiple Signatures

4.1.  Example Scenarios

   There are many reasons why a message might have multiple signatures.
   For example, a given signer might sign multiple times, perhaps with
   different hashing or signing algorithms during a transition phase.

      INFORMATIVE EXAMPLE: Suppose SHA-256 is in the future found to be
      insufficiently strong, and DKIM usage transitions to SHA-1024.  A
      signer might immediately sign using the newer algorithm, but
      continue to sign using the older algorithm for interoperability
      with verifiers that had not yet upgraded.  The signer would do
      this by adding two DKIM-Signature header fields, one using each
      algorithm.  Older verifiers that did not recognize SHA-1024 as an
      acceptable algorithm would skip that signature and use the older
      algorithm; newer verifiers could use either signature at their
      option, and all other things being equal might not even attempt to
      verify the other signature.

   Similarly, a signer might sign a message including all headers and no
   "l=" tag (to satisfy strict verifiers) and a second time with a
   limited set of headers and an "l=" tag (in anticipation of possible
   message modifications in route to other verifiers).  Verifiers could
   then choose which signature they preferred.

      INFORMATIVE EXAMPLE: A verifier might receive a message with two
      signatures, one covering more of the message than the other.  If
      the signature covering more of the message verified, then the
      verifier could make one set of policy decisions; if that signature
      failed but the signature covering less of the message verified,
      the verifier might make a different set of policy decisions.

   Of course, a message might also have multiple signatures because it
   passed through multiple signers.  A common case is expected to be
   that of a signed message that passes through a mailing list that also
   signs all messages.  Assuming both of those signatures verify, a
   recipient might choose to accept the message if either of those
   signatures were known to come from trusted sources.

      INFORMATIVE EXAMPLE: Recipients might choose to whitelist mailing
      lists to which they have subscribed and that have acceptable anti-
      abuse policies so as to accept messages sent to that list even
      from unknown authors.  They might also subscribe to less trusted
      mailing lists (e.g., those without anti-abuse protection) and be
      willing to accept all messages from specific authors, but insist
      on doing additional abuse scanning for other messages.




Allman, et al.              Standards Track                    [Page 32]

RFC 4871                    DKIM Signatures                     May 2007


   Another related example of multiple signers might be forwarding
   services, such as those commonly associated with academic alumni
   sites.

      INFORMATIVE EXAMPLE: A recipient might have an address at
      members.example.org, a site that has anti-abuse protection that is
      somewhat less effective than the recipient would prefer.  Such a
      recipient might have specific authors whose messages would be
      trusted absolutely, but messages from unknown authors that had
      passed the forwarder's scrutiny would have only medium trust.

4.2.  Interpretation

   A signer that is adding a signature to a message merely creates a new
   DKIM-Signature header, using the usual semantics of the h= option.  A
   signer MAY sign previously existing DKIM-Signature header fields
   using the method described in Section 5.4 to sign trace header
   fields.

      INFORMATIVE NOTE: Signers should be cognizant that signing DKIM-
      Signature header fields may result in signature failures with
      intermediaries that do not recognize that DKIM-Signature header
      fields are trace header fields and unwittingly reorder them, thus
      breaking such signatures.  For this reason, signing existing DKIM-
      Signature header fields is unadvised, albeit legal.

      INFORMATIVE NOTE: If a header field with multiple instances is
      signed, those header fields are always signed from the bottom up.
      Thus, it is not possible to sign only specific DKIM-Signature
      header fields.  For example, if the message being signed already
      contains three DKIM-Signature header fields A, B, and C, it is
      possible to sign all of them, B and C only, or C only, but not A
      only, B only, A and B only, or A and C only.

   A signer MAY add more than one DKIM-Signature header field using
   different parameters.  For example, during a transition period a
   signer might want to produce signatures using two different hash
   algorithms.

   Signers SHOULD NOT remove any DKIM-Signature header fields from
   messages they are signing, even if they know that the signatures
   cannot be verified.

   When evaluating a message with multiple signatures, a verifier SHOULD
   evaluate signatures independently and on their own merits.  For
   example, a verifier that by policy chooses not to accept signatures
   with deprecated cryptographic algorithms would consider such
   signatures invalid.  Verifiers MAY process signatures in any order of



Allman, et al.              Standards Track                    [Page 33]

RFC 4871                    DKIM Signatures                     May 2007


   their choice; for example, some verifiers might choose to process
   signatures corresponding to the From field in the message header
   before other signatures.  See Section 6.1 for more information about
   signature choices.

      INFORMATIVE IMPLEMENTATION NOTE: Verifier attempts to correlate
      valid signatures with invalid signatures in an attempt to guess
      why a signature failed are ill-advised.  In particular, there is
      no general way that a verifier can determine that an invalid
      signature was ever valid.

   Verifiers SHOULD ignore failed signatures as though they were not
   present in the message.  Verifiers SHOULD continue to check
   signatures until a signature successfully verifies to the
   satisfaction of the verifier.  To limit potential denial-of-service
   attacks, verifiers MAY limit the total number of signatures they will
   attempt to verify.

5.  Signer Actions

   The following steps are performed in order by signers.

5.1.  Determine Whether the Email Should Be Signed and by Whom

   A signer can obviously only sign email for domains for which it has a
   private key and the necessary knowledge of the corresponding public
   key and selector information.  However, there are a number of other
   reasons beyond the lack of a private key why a signer could choose
   not to sign an email.

      INFORMATIVE NOTE: Signing modules may be incorporated into any
      portion of the mail system as deemed appropriate, including an
      MUA, a SUBMISSION server, or an MTA.  Wherever implemented,
      signers should beware of signing (and thereby asserting
      responsibility for) messages that may be problematic.  In
      particular, within a trusted enclave the signing address might be
      derived from the header according to local policy; SUBMISSION
      servers might only sign messages from users that are properly
      authenticated and authorized.

      INFORMATIVE IMPLEMENTER ADVICE: SUBMISSION servers should not sign
      Received header fields if the outgoing gateway MTA obfuscates
      Received header fields, for example, to hide the details of
      internal topology.

   If an email cannot be signed for some reason, it is a local policy
   decision as to what to do with that email.




Allman, et al.              Standards Track                    [Page 34]

RFC 4871                    DKIM Signatures                     May 2007


5.2.  Select a Private Key and Corresponding Selector Information

   This specification does not define the basis by which a signer should
   choose which private key and selector information to use.  Currently,
   all selectors are equal as far as this specification is concerned, so
   the decision should largely be a matter of administrative
   convenience.  Distribution and management of private keys is also
   outside the scope of this document.

      INFORMATIVE OPERATIONS ADVICE: A signer should not sign with a
      private key when the selector containing the corresponding public
      key is expected to be revoked or removed before the verifier has
      an opportunity to validate the signature.  The signer should
      anticipate that verifiers may choose to defer validation, perhaps
      until the message is actually read by the final recipient.  In
      particular, when rotating to a new key pair, signing should
      immediately commence with the new private key and the old public
      key should be retained for a reasonable validation interval before
      being removed from the key server.

5.3.  Normalize the Message to Prevent Transport Conversions

   Some messages, particularly those using 8-bit characters, are subject
   to modification during transit, notably conversion to 7-bit form.
   Such conversions will break DKIM signatures.  In order to minimize
   the chances of such breakage, signers SHOULD convert the message to a
   suitable MIME content transfer encoding such as quoted-printable or
   base64 as described in MIME Part One [RFC2045] before signing.  Such
   conversion is outside the scope of DKIM; the actual message SHOULD be
   converted to 7-bit MIME by an MUA or MSA prior to presentation to the
   DKIM algorithm.

   If the message is submitted to the signer with any local encoding
   that will be modified before transmission, that modification to
   canonical [RFC2822] form MUST be done before signing.  In particular,
   bare CR or LF characters (used by some systems as a local line
   separator convention) MUST be converted to the SMTP-standard CRLF
   sequence before the message is signed.  Any conversion of this sort
   SHOULD be applied to the message actually sent to the recipient(s),
   not just to the version presented to the signing algorithm.

   More generally, the signer MUST sign the message as it is expected to
   be received by the verifier rather than in some local or internal
   form.







Allman, et al.              Standards Track                    [Page 35]

RFC 4871                    DKIM Signatures                     May 2007


5.4.  Determine the Header Fields to Sign

   The From header field MUST be signed (that is, included in the "h="
   tag of the resulting DKIM-Signature header field).  Signers SHOULD
   NOT sign an existing header field likely to be legitimately modified
   or removed in transit.  In particular, [RFC2821] explicitly permits
   modification or removal of the Return-Path header field in transit.
   Signers MAY include any other header fields present at the time of
   signing at the discretion of the signer.

      INFORMATIVE OPERATIONS NOTE: The choice of which header fields to
      sign is non-obvious.  One strategy is to sign all existing, non-
      repeatable header fields.  An alternative strategy is to sign only
      header fields that are likely to be displayed to or otherwise be
      likely to affect the processing of the message at the receiver.  A
      third strategy is to sign only "well known" headers.  Note that
      verifiers may treat unsigned header fields with extreme
      skepticism, including refusing to display them to the end user or
      even ignoring the signature if it does not cover certain header
      fields.  For this reason, signing fields present in the message
      such as Date, Subject, Reply-To, Sender, and all MIME header
      fields are highly advised.

   The DKIM-Signature header field is always implicitly signed and MUST
   NOT be included in the "h=" tag except to indicate that other
   preexisting signatures are also signed.

   Signers MAY claim to have signed header fields that do not exist
   (that is, signers MAY include the header field name in the "h=" tag
   even if that header field does not exist in the message).  When
   computing the signature, the non-existing header field MUST be
   treated as the null string (including the header field name, header
   field value, all punctuation, and the trailing CRLF).

      INFORMATIVE RATIONALE: This allows signers to explicitly assert
      the absence of a header field; if that header field is added later
      the signature will fail.

      INFORMATIVE NOTE: A header field name need only be listed once
      more than the actual number of that header field in a message at
      the time of signing in order to prevent any further additions.
      For example, if there is a single Comments header field at the
      time of signing, listing Comments twice in the "h=" tag is
      sufficient to prevent any number of Comments header fields from
      being appended; it is not necessary (but is legal) to list
      Comments three or more times in the "h=" tag.





Allman, et al.              Standards Track                    [Page 36]

RFC 4871                    DKIM Signatures                     May 2007


   Signers choosing to sign an existing header field that occurs more
   than once in the message (such as Received) MUST sign the physically
   last instance of that header field in the header block.  Signers
   wishing to sign multiple instances of such a header field MUST
   include the header field name multiple times in the h= tag of the
   DKIM-Signature header field, and MUST sign such header fields in
   order from the bottom of the header field block to the top.  The
   signer MAY include more instances of a header field name in h= than
   there are actual corresponding header fields to indicate that
   additional header fields of that name SHOULD NOT be added.

      INFORMATIVE EXAMPLE:

      If the signer wishes to sign two existing Received header fields,
      and the existing header contains:

       Received: <A>
       Received: <B>
       Received: <C>

      then the resulting DKIM-Signature header field should read:

       DKIM-Signature: ... h=Received : Received : ...

      and Received header fields <C> and <B> will be signed in that
      order.

   Signers should be careful of signing header fields that might have
   additional instances added later in the delivery process, since such
   header fields might be inserted after the signed instance or
   otherwise reordered.  Trace header fields (such as Received) and
   Resent-* blocks are the only fields prohibited by [RFC2822] from
   being reordered.  In particular, since DKIM-Signature header fields
   may be reordered by some intermediate MTAs, signing existing DKIM-
   Signature header fields is error-prone.

      INFORMATIVE ADMONITION: Despite the fact that [RFC2822] permits
      header fields to be reordered (with the exception of Received
      header fields), reordering of signed header fields with multiple
      instances by intermediate MTAs will cause DKIM signatures to be
      broken; such anti-social behavior should be avoided.

      INFORMATIVE IMPLEMENTER'S NOTE: Although not required by this
      specification, all end-user visible header fields should be signed
      to avoid possible "indirect spamming".  For example, if the
      Subject header field is not signed, a spammer can resend a
      previously signed mail, replacing the legitimate subject with a
      one-line spam.



Allman, et al.              Standards Track                    [Page 37]

RFC 4871                    DKIM Signatures                     May 2007


5.5.  Recommended Signature Content

   In order to maximize compatibility with a variety of verifiers, it is
   recommended that signers follow the practices outlined in this
   section when signing a message.  However, these are generic
   recommendations applying to the general case; specific senders may
   wish to modify these guidelines as required by their unique
   situations.  Verifiers MUST be capable of verifying signatures even
   if one or more of the recommended header fields is not signed (with
   the exception of From, which must always be signed) or if one or more
   of the disrecommended header fields is signed.  Note that verifiers
   do have the option of ignoring signatures that do not cover a
   sufficient portion of the header or body, just as they may ignore
   signatures from an identity they do not trust.

   The following header fields SHOULD be included in the signature, if
   they are present in the message being signed:

   o  From (REQUIRED in all signatures)

   o  Sender, Reply-To

   o  Subject

   o  Date, Message-ID

   o  To, Cc

   o  MIME-Version

   o  Content-Type, Content-Transfer-Encoding, Content-ID, Content-
      Description

   o  Resent-Date, Resent-From, Resent-Sender, Resent-To, Resent-Cc,
      Resent-Message-ID

   o  In-Reply-To, References

   o  List-Id, List-Help, List-Unsubscribe, List-Subscribe, List-Post,
      List-Owner, List-Archive

   The following header fields SHOULD NOT be included in the signature:

   o  Return-Path

   o  Received

   o  Comments, Keywords



Allman, et al.              Standards Track                    [Page 38]

RFC 4871                    DKIM Signatures                     May 2007


   o  Bcc, Resent-Bcc

   o  DKIM-Signature

   Optional header fields (those not mentioned above) normally SHOULD
   NOT be included in the signature, because of the potential for
   additional header fields of the same name to be legitimately added or
   reordered prior to verification.  There are likely to be legitimate
   exceptions to this rule, because of the wide variety of application-
   specific header fields that may be applied to a message, some of
   which are unlikely to be duplicated, modified, or reordered.

   Signers SHOULD choose canonicalization algorithms based on the types
   of messages they process and their aversion to risk.  For example,
   e-commerce sites sending primarily purchase receipts, which are not
   expected to be processed by mailing lists or other software likely to
   modify messages, will generally prefer "simple" canonicalization.
   Sites sending primarily person-to-person email will likely prefer to
   be more resilient to modification during transport by using "relaxed"
   canonicalization.

   Signers SHOULD NOT use "l=" unless they intend to accommodate
   intermediate mail processors that append text to a message.  For
   example, many mailing list processors append "unsubscribe"
   information to message bodies.  If signers use "l=", they SHOULD
   include the entire message body existing at the time of signing in
   computing the count.  In particular, signers SHOULD NOT specify a
   body length of 0 since this may be interpreted as a meaningless
   signature by some verifiers.

5.6.  Compute the Message Hash and Signature

   The signer MUST compute the message hash as described in Section 3.7
   and then sign it using the selected public-key algorithm.  This will
   result in a DKIM-Signature header field that will include the body
   hash and a signature of the header hash, where that header includes
   the DKIM-Signature header field itself.

   Entities such as mailing list managers that implement DKIM and that
   modify the message or a header field (for example, inserting
   unsubscribe information) before retransmitting the message SHOULD
   check any existing signature on input and MUST make such
   modifications before re-signing the message.

   The signer MAY elect to limit the number of bytes of the body that
   will be included in the hash and hence signed.  The length actually
   hashed should be inserted in the "l=" tag of the DKIM-Signature
   header field.



Allman, et al.              Standards Track                    [Page 39]

RFC 4871                    DKIM Signatures                     May 2007


5.7.  Insert the DKIM-Signature Header Field

   Finally, the signer MUST insert the DKIM-Signature header field
   created in the previous step prior to transmitting the email.  The
   DKIM-Signature header field MUST be the same as used to compute the
   hash as described above, except that the value of the "b=" tag MUST
   be the appropriately signed hash computed in the previous step,
   signed using the algorithm specified in the "a=" tag of the DKIM-
   Signature header field and using the private key corresponding to the
   selector given in the "s=" tag of the DKIM-Signature header field, as
   chosen above in Section 5.2

   The DKIM-Signature header field MUST be inserted before any other
   DKIM-Signature fields in the header block.

      INFORMATIVE IMPLEMENTATION NOTE: The easiest way to achieve this
      is to insert the DKIM-Signature header field at the beginning of
      the header block.  In particular, it may be placed before any
      existing Received header fields.  This is consistent with treating
      DKIM-Signature as a trace header field.

6.  Verifier Actions

   Since a signer MAY remove or revoke a public key at any time, it is
   recommended that verification occur in a timely manner.  In many
   configurations, the most timely place is during acceptance by the
   border MTA or shortly thereafter.  In particular, deferring
   verification until the message is accessed by the end user is
   discouraged.

   A border or intermediate MTA MAY verify the message signature(s).  An
   MTA who has performed verification MAY communicate the result of that
   verification by adding a verification header field to incoming
   messages.  This considerably simplifies things for the user, who can
   now use an existing mail user agent.  Most MUAs have the ability to
   filter messages based on message header fields or content; these
   filters would be used to implement whatever policy the user wishes
   with respect to unsigned mail.

   A verifying MTA MAY implement a policy with respect to unverifiable
   mail, regardless of whether or not it applies the verification header
   field to signed messages.

   Verifiers MUST produce a result that is semantically equivalent to
   applying the following steps in the order listed.  In practice,
   several of these steps can be performed in parallel in order to
   improve performance.




Allman, et al.              Standards Track                    [Page 40]

RFC 4871                    DKIM Signatures                     May 2007


6.1.  Extract Signatures from the Message

   The order in which verifiers try DKIM-Signature header fields is not
   defined; verifiers MAY try signatures in any order they like.  For
   example, one implementation might try the signatures in textual
   order, whereas another might try signatures by identities that match
   the contents of the From header field before trying other signatures.
   Verifiers MUST NOT attribute ultimate meaning to the order of
   multiple DKIM-Signature header fields.  In particular, there is
   reason to believe that some relays will reorder the header fields in
   potentially arbitrary ways.

      INFORMATIVE IMPLEMENTATION NOTE: Verifiers might use the order as
      a clue to signing order in the absence of any other information.
      However, other clues as to the semantics of multiple signatures
      (such as correlating the signing host with Received header fields)
      may also be considered.

   A verifier SHOULD NOT treat a message that has one or more bad
   signatures and no good signatures differently from a message with no
   signature at all; such treatment is a matter of local policy and is
   beyond the scope of this document.

   When a signature successfully verifies, a verifier will either stop
   processing or attempt to verify any other signatures, at the
   discretion of the implementation.  A verifier MAY limit the number of
   signatures it tries to avoid denial-of-service attacks.

      INFORMATIVE NOTE: An attacker could send messages with large
      numbers of faulty signatures, each of which would require a DNS
      lookup and corresponding CPU time to verify the message.  This
      could be an attack on the domain that receives the message, by
      slowing down the verifier by requiring it to do a large number of
      DNS lookups and/or signature verifications.  It could also be an
      attack against the domains listed in the signatures, essentially
      by enlisting innocent verifiers in launching an attack against the
      DNS servers of the actual victim.

   In the following description, text reading "return status
   (explanation)" (where "status" is one of "PERMFAIL" or "TEMPFAIL")
   means that the verifier MUST immediately cease processing that
   signature.  The verifier SHOULD proceed to the next signature, if any
   is present, and completely ignore the bad signature.  If the status
   is "PERMFAIL", the signature failed and should not be reconsidered.
   If the status is "TEMPFAIL", the signature could not be verified at
   this time but may be tried again later.  A verifier MAY either defer
   the message for later processing, perhaps by queueing it locally or
   issuing a 451/4.7.5 SMTP reply, or try another signature; if no good



Allman, et al.              Standards Track                    [Page 41]

RFC 4871                    DKIM Signatures                     May 2007


   signature is found and any of the signatures resulted in a TEMPFAIL
   status, the verifier MAY save the message for later processing.  The
   "(explanation)" is not normative text; it is provided solely for
   clarification.

   Verifiers SHOULD ignore any DKIM-Signature header fields where the
   signature does not validate.  Verifiers that are prepared to validate
   multiple signature header fields SHOULD proceed to the next signature
   header field, should it exist.  However, verifiers MAY make note of
   the fact that an invalid signature was present for consideration at a
   later step.

      INFORMATIVE NOTE: The rationale of this requirement is to permit
      messages that have invalid signatures but also a valid signature
      to work.  For example, a mailing list exploder might opt to leave
      the original submitter signature in place even though the exploder
      knows that it is modifying the message in some way that will break
      that signature, and the exploder inserts its own signature.  In
      this case, the message should succeed even in the presence of the
      known-broken signature.

   For each signature to be validated, the following steps should be
   performed in such a manner as to produce a result that is
   semantically equivalent to performing them in the indicated order.

6.1.1.  Validate the Signature Header Field

   Implementers MUST meticulously validate the format and values in the
   DKIM-Signature header field; any inconsistency or unexpected values
   MUST cause the header field to be completely ignored and the verifier
   to return PERMFAIL (signature syntax error).  Being "liberal in what
   you accept" is definitely a bad strategy in this security context.
   Note however that this does not include the existence of unknown tags
   in a DKIM-Signature header field, which are explicitly permitted.

   Verifiers MUST ignore DKIM-Signature header fields with a "v=" tag
   that is inconsistent with this specification and return PERMFAIL
   (incompatible version).

      INFORMATIVE IMPLEMENTATION NOTE: An implementation may, of course,
      choose to also verify signatures generated by older versions of
      this specification.

   If any tag listed as "required" in Section 3.5 is omitted from the
   DKIM-Signature header field, the verifier MUST ignore the DKIM-
   Signature header field and return PERMFAIL (signature missing
   required tag).




Allman, et al.              Standards Track                    [Page 42]

RFC 4871                    DKIM Signatures                     May 2007


      INFORMATIONAL NOTE: The tags listed as required in Section 3.5 are
      "v=", "a=", "b=", "bh=", "d=", "h=", and "s=".  Should there be a
      conflict between this note and Section 3.5, Section 3.5 is
      normative.

   If the DKIM-Signature header field does not contain the "i=" tag, the
   verifier MUST behave as though the value of that tag were "@d", where
   "d" is the value from the "d=" tag.

   Verifiers MUST confirm that the domain specified in the "d=" tag is
   the same as or a parent domain of the domain part of the "i=" tag.
   If not, the DKIM-Signature header field MUST be ignored and the
   verifier should return PERMFAIL (domain mismatch).

   If the "h=" tag does not include the From header field, the verifier
   MUST ignore the DKIM-Signature header field and return PERMFAIL (From
   field not signed).

   Verifiers MAY ignore the DKIM-Signature header field and return
   PERMFAIL (signature expired) if it contains an "x=" tag and the
   signature has expired.

   Verifiers MAY ignore the DKIM-Signature header field if the domain
   used by the signer in the "d=" tag is not associated with a valid
   signing entity.  For example, signatures with "d=" values such as
   "com" and "co.uk" may be ignored.  The list of unacceptable domains
   SHOULD be configurable.

   Verifiers MAY ignore the DKIM-Signature header field and return
   PERMFAIL (unacceptable signature header) for any other reason, for
   example, if the signature does not sign header fields that the
   verifier views to be essential.  As a case in point, if MIME header
   fields are not signed, certain attacks may be possible that the
   verifier would prefer to avoid.

6.1.2.  Get the Public Key

   The public key for a signature is needed to complete the verification
   process.  The process of retrieving the public key depends on the
   query type as defined by the "q=" tag in the DKIM-Signature header
   field.  Obviously, a public key need only be retrieved if the process
   of extracting the signature information is completely successful.
   Details



key management and represent      are described in  E.Sec     3.6.  The verifier MUST validateorkinuestrecordnts: 4870  E.ignore any public           s that     mal    ed.
  E.When        k Woa message, absoletes: 4870 per    orkinfollowing  E.steps in    anner: Stanis semanticallyorkingame as        k Workim    


Allman, et al.              Standaory:Track                    [Page 43]

RFC 4871y
                  DKIM S Group  sy
                   May 2007
     rkinorder indicated (in some cases,     i    omme      may  E.paralleliz     re      these      ,    lo    y: Se         s rema      unchanged):     1.  Retriev      J. Callas
Cas               Sendmail,  usk Worki  E.    algorith    as
  "q=" tagton
  do     fro      "d       Mts:            selector           s            2.  Ifas
  query fo     isco Systemsflman
to respondton
  soletes:        MAY defer acceptance



this     lnts: 48turn TEMPFAIL (ke      sugunavailable)f Thissoletec         occurrk Wodufer tn
   nco    and suggSMTP sessionton
isocol be ach    d with a 451/4.7.5he "Inrepl and suggcode.  Alternatively standards traocol st     doc      P       and sugglocalmo

u    r lat    rial           rking Group  .  No     atentified tofer t        P        is unlimited    ubjectan Idenial-of-entified Mrvice attacks      3f This Memo

   This document specifies abecausCopyricornternetition of th           does not existtatus of this pr870 immedia     requesand suggPERMscussinospeciforng Group  )      4f This Memo

   This document specirequess multipl            nton
 and suggsoletes: may choose onrnet cof this framew    signiyclCopyroughand suggassert responsib                         to ass         on eac, thus
          tMay 20iscre     to asse         erInc.
Ob      to assr technology to pesd Maunspecetesdf This Memsoletes: ing do an Ior a  thus
   psage,  protecting meston
        request..." worerven of this memo tity and the in     endmaimeans "tr Delannextology to pe, if    ;and suggif none, requestto     anothefer Agents         usual way"      5f This Memresult ultimaed          o

   mit verifadhe Copos Identified       fori.  I         y.  Prnts.  on of the source and
      thus
   protecting me and requesty either Muestsyntax error
   Voletes:s         re urged. .              ility  Request is knowcarefuM. Deo         voiy cotemp    uthentic  In    ticularng Identity . . . . . . . . . . . keystandardsvernet
zatio ("v      ): Stanthe . .verif                Inchis Mem"g              J. Callas
Cmit verifmatcbal coLs un-  2.and suggto asse"i . . . . . . .t

   Dog Group   hea    fielt stans to permit
   a  . . . . .  . . . . . . . . . .  5
     1.2.  and sugg(inapplic for. . 
   imp  . . . . . .  . . . . . . . . oof this memo  . .  6
     2.3. i verif71     ton
   . . . . mustl Pr"*" (      . . . . .  all addresy ma       007


)    idenentire g= . . .  7
  . . . . .mit     which forault an I"g=*"), naturwiphy andsoletes: 4870 4871    . . . . . . . . . .  6
     2.4.  Commonokens . . . . . . . and suggOaturetha  4
   tetionsoletes:s SHOULD NOT tretandABNF Tokens .eKIM-Quoteandards           havbstrac . . . .     different. Delanmain   3.3.  Sigout;. .   2.  Termin. . . . . . . . . . .pror th      Py: Sta                                       M. Libbey
                         4                                    Yahoo! Inc
                                   fied Mem. . hav         vid   Mg Group   by virturnet  Algorithms to permitsus a2007


 ght (C) Th     7 . . . . . h . . . icati . . . . J. Callas
CategornKeys Id has, thus
             mplied. . ultia  7
             -ahoo! Inc  White . . . . ace . . . . includ . .  4
nd
 ntentn
Req . . . . . .. . . . . . . . . . . . . . . . . . . . . . . .  6
     2.4.  Common ABNF Tokens .ropronteiple res . . . (MTAs) 8 . . . . . .  6
     2ata ( . . p     2.1mmuniptstatus  4
   uestha . . . . been revok. . f Multisoletes: 4870  . . .4
   aignifies     3.3. g Group   check. . .  5
     1.2.  Scalabby
    
   T. . . . .  3.7.  C. . . .          . . . . ce betwand ing an Stanhayptond by
             ndning and Verif. . . . . . . . mov        9. . . . . . . . . 34
      . . . suit. . .d-Praphyandar. . .         . . . . . 3. . .ype Inc. . .  . . . "a=". . 3"k       . . . .   4.1on of the    2.3.  Whitespace . . . the source and
   contents of messages by either Mtions . . . . tems,. . . . . . 6.1. fraCompu        . . .nts.       Giv . .  10
 r. . 35
J. Callas
 . . . ybstrac . . . . . ons. . .of  E.workon           M. Dequivalmmen . . .                ains      Based.5.  Imres . . . .. . . . .  4
e "c       May 2body lengt, thus
  ay.  Prot         l  DomainKeys Id  Whitespace  nam. . . . .  . . thus
    Intprep. . a canon   Mized. . . . .32
    t

   Doaown ng Selecto.
                   7 MaiTF Trus. . .  . . . .mit veri         ctu M. Dne . . .b    st        
        ifier.1.  Whitespace  3.7.  C6
     6.3.  Inteithms gaag S the H.  DK. . 47
   Whitespace .andardizatmparis. . e andb J. Fe-insensi andtatus of Tures from the Message                    
   sults    nsert tported ABNF Tokeple es          al Policy copms, Inc.
        on of the . . . . .cation fra . . . . . .ultiple  . . . .al Policy . . t

   Do 6.2.S TXT R. 48
     . . 31
revious      . . . . . . . . .valuctionvey 7.4.  _dombnterpret Resul . . . . . 50
 2.2.  Verifier . . . . . 38
 . . . .ectors  .  . . . . . . . . . . .  5
     1.2.  Sc 6.2.. . . idverif40
   (MTAs) or MU        erifier Actionypes Registry  inkey DN40
   s Identified  . . . . .uery Method Whites 50
           me    ism ons . . . .IM-Quoted-Pr  Cisco Systems,Message  . .
          _domainkey  . . . .        DKIM Signatmit verif         DKIM Selector Flags Registry . . . . . . . . . . . . . . . 52



Allmations  . .             Stand                                      M. Libbey
                         5                                    Yahoo! Inc
                                   Tabl Tag= . .ton
       2.3.  a    rrec. . soletes          INFORMATIVE IMPLEMENTER'S. . E: I             s might wish. . . . . inicificer Field  .-uesto

   onical     rmine cal Terrk Worki. 54
  . . . 7.7.  J. Callas
C . . . Signed until. 40
 inal decryp       . 54
  . . . . otecti . . . . . . . .a. . so           S  . . . . 5.  Imported ry . . . . . . bef. .            . . . . .ecifications lis  7.4.. 54
  stry  . .. . . 32
     4.1.  Example Scena . . . 
     7.7.a. . . . . . . . Registry . . . 6.2; however 1]
     6.2.. . . 51
     7.8.  . . . . . . . . . KIM Signat.  7
   ions der . . . the  . . .ains  A  6.2.  Comm Verification Results . .  . . . .KIM Signatlimi. .  . . .numbternetbyte. 32
     6.2.pases f. . 40
rovements.  P. . . . .    3All
     beyoeys Iatg by Pntionall        . . .    .  Hion  . . . . . . . . . .  . . . . . . . .. . . . .ery  . . .  . . . . . . .          . . . . . . andarsuspicgningsuc 55
  . .runnts. . . . . . . 47
    . . .erences . . . . . . .,s  .lathe curreg Group     .  DKIM-Q(e.g.,8
  requesix Ay either Mun 10
  . . . . ) . .r     [Pix A.  Exam  2. alces . . . . . . . 40
policy modulzation 
     8.5.  Replay AttacATION . . .  . . . . eakage Append 8.6.  6.2. . . .se (INFORMATIVE)  . . . . . . . . .  9.eade    Track   MIMEields . . . 56
eader Field . u.  Re.  IN-4"ght ck (lemenk Workinecord. . . ."--CRLF") . . . . . . . 52
         veveri     y . . . . 4.5    3.2.S . . . . . . . ay . . . .. . 34
This d    as. . .  . . .  a. . . . railix A . . . .   A . . .breakk Workin. .  strucC) The A s     . . . .wa . .rotocol .  Cre. . . b . . appe 5.5. . . . . . ny " goal arterpret Rt

   Doandards 6.2.  Comm;. . 62
  D.  MUA Consintioalrea . . . . . . . . . rack     Offiwintabppea    . . . .stic KeynStanllverifProtocol displaes R. . 40
penduser39
  of TCommuolictthe DKIM-Signa Rtentss     ure is ver. . ix A.ogist         f Contentsn
Reqigned  . . . . .nature email . 32
    ity, system. . .do so    whatered          labie . .t    3For exa    ,                . . . .ing dom
   d    unity,  Scenarios. . . . . 40

     8.1.  Inf  9.




t onderan     h. . . . . . . 48
. . . .e Tag er  Nor.  Infwledicatiix A  4.1.  Exampleor . .'s domai. . .uhe E         status. . . . . . . . . . . . . . . . . 4block. . . . . . 61
     AADVICEnto MUA fiate
 writers: P . .matei . .alfo . . . . searchix C.il (DKIMd thereby conf. . isiblst frkriate public . . . . ity, d-PrKIM Signs shoul. . .. . . . . can verify the s w. . dd . . . .  . . . .ns . . . . 40
   6.  007


       se (INF. . . .  id pubt. . . . 
     7.7.  iateice
 the me40]) i 3]
by whi        . . . MUA.  5
. . . .  2.  Terminssession oning (e.g
RFC 4.  Aluion that
bogu    

1.  I 8.2.  Misappropriated Private Key  . . . . . . . . . . . . . . . 53
     6
     3.6.  Key Management and Representation  . . . . . . . . . . . . 25
     3.7.  d thereby confil Exhat
uthenter .  To circumv. . .. . .thent . . . . . . . . . . . 65
   Ade    r's domaine approach taken by DKaftnarios  .es . . . . . .n   the sigd




a newll-known, tru39
   framionapret07


1. /Apply . . . P. . .     I . 57nformative scoprnet commu  1.1.  Signient of      phica . . . .. . .hom . . . es can ng (e.gmake, buents previous apprunity, 71     s aer huopportun messo ae Keeiationes can 0]) iunsage archiving is nocannoa signS 1.1.  Sl stamessage archiving is noc. . eignipredic   5.4 as a  track pby . . . naturedecinet
reatd byliaers b mesor Cd. . . . 58tr  7
an. 48
repu           n8.  d stahe existing email infrlenti  o   can e Refe requires. . . 5ane im.  Alto  Mesgnndently ofients in ordertion  clienason. . . DKIM . .he existing email infr   Mac Appewleddently of cliicationno    calizients in ordrejectn general . . . . . . . . . . . re(DKIM . . . . sol    rom thebasarties . .  Tratitygnature Hea. .  uo reifbe de separates;ultipu      gnat. .  (e.ggraphyseredser teroperabil mesproblem .  Hrdered Header es . . . . .. . . op. . .        can  . . . . ( messomain
  wheof thys Identifix Aandardspe of hoses aprithe gre     ,to decDKIM onstandaspend. . . . . . . .). . . . . soletes: ru . .ynchronousl . 6ne theure a "Internet
. . 35
ns . . . . . miMessago   sign         Ston
  MTAignature byaphya 550/5.7.xthe stzationrejectfge r . . . .osfferllmanfeiers  . . . . . . . perhapyptography anf thalabierly s . . . tions forGP C . .ora   Tail8.12.

   Docial Pf th   DKIving      ds" (STD 1) M
      si. . . . 5      s) o51 TD 1) U


Allman., SecuKIM Signat-field becausestions for     Ts of interpretatMail. . 58inted auth . .       protect becausoy whinatureexte
  level
   au . . . t to 57
di. . . 0]) itity specifie4xxe signatuM
      sig  5
   2.  Termin. . .ographicrt the extrrovements.  messaracterize and      quest4xxal
   addrieract SiOon  M-Signature He . . . . . . . . ton
               IM-Signrifier  [Page. . igher-leveages cans (e the emex. . i    low/white . .yption signing to tagement
)arch/ader     DKIM Signa. . . . . . . . . rties. . . .o
   halftity
nyable  . urrentlalue Lie els anyoFrom:n of a message iton
  essages can . . . .takm.     9to ens



0]) in th Regisrastruct




as a mes    l    hat
   lmangnatuts tus of this proto, et al.. . . .d thereby confrt of
Netemuctioskepticism,Public ix Afrom         a toddentlure r eaderof an         mini.  Infield so       DKIM Signatu 8.2.  Misappropriated Private Key  . . . . . . . . . . . . . . . 53
     7                                    Yahoo! Inc
                                   Whia mes    mptomn
Req . . . .or public key d retb . . .--tive Reftions  . . . .n'       Sugmees   5  Domain  DKxacly;
aphy;

   om . . . . .   Tetficatead Mail (DKastruce imfouet ssts s th
      header f Mail (DKlize the Message. 60
t Ma . . ervice           how . . . tranica?. . . . .te Signing bn     INFORMA
   "SHOULD", "SHOit"OPT Domally satureand "OPTIis

 ssagertifin overzeal . .sion o?gning"MUST agnos  Inpurpty mton
   The k.




 wh. . . rovements.  Pfies ignature by quma Keyions for . . . . . . . . . . archiired tole Key M . . .e publies can log .  5ader Fl infrastruce ime with anyonenrack. . . tem.   rthe . . .lany
      intaestion oing is noregardlifierf.  Vature4871   . . t looks liket al.  tructur.

. . .ANAr toks  . respod as     Yintroduc2007
m    w  7.2.par wi. . . .vl stnd byg. . . . rt oejectANneithel Sub. Fento be " in sscrib delegure i      some wayTrust (2injection docuction7.4. . . . .shed     . . . . .IETFxploder d

2.1[RFC2434]ling       4.1.  ExampleTag and
      In generaAifiers

   Elemeprovid . .the . . . . . ag o  no attempt .  5t exd Be Sins [RFC42,
   MSfiers

   Elements in the mail s Rf a m   This 29
    verifiers.  Tntally;

   o  alliny Agents (MDAs),by con. . . . .he messagthe 55
   l. . ri. . . . . of a mregistrriseility

  xploder.

2.3.  Wh+-espactespacehere are th+list exploder.

2.3.  Whi| TYPE | REFERENCEace:

  list exploder.

2.3.  Whitespace

   There are three forms of whitespace:

   v:

   (thereed befor)le whitespace, i.e., a spac| a234]).

   o  LWSP is linear whitespace, defined ab WSP plus CRLF (formal
      definition in [RFC4234h34]).

   o  LWSP is linear whitespace, defined ac234]).

   o  LWSP is linear whitespace, defined ad234]).

   o  LWSP is linear whitespace, defined altip]).

   o  LWSP is linear whitespace, defined aiormation
   only):

       WSP =   SP / HTAB
     lormation
   only):

       WSP =   SP / HTAB
     qormation
   only):

       WSP =   SP / HTAB
     
    ).

   o  LWSP is linear whitespace, defined atormation
   only):

       WSP =   SP / HTAB
     xormation
   only):

       WSP =   SP / HTAB
     zormation
   only):

       WSP =   SP / HTAB
   tespace

   There are threelist explo Agents (MDAs), or MUAs.
   In most cases Iome conVme wable to other key
   fetching services as they become available.

2.  Termin8                                    Yahoo! Inc
                                7es     4.1.  ExampleQ

   Methodost casesd as the         -  1. (Verification y . . . . 5)atures are referred to  as o

   mollowder) ofe may beAs, Mail Delivery Agents (MDAs),  The following tokene reExampl     7.fiers will be closee inc         Ci. . . . . 3]
permi8
           onatur    RMATIIRED . . . . 10
  systemstive  [FWS])
   essage or some consumiking t such as a
   mailinbility

  ing =     1*(ALPHA / DIGIT / "

   There are three forms of whitespace  o  WSP OPmail P represents simple whitespace, i.e., a ocal-part of an email address)

   The following tokens ardnswing x ABNF tokens are used elsewhere in this documocal-part of an email address)

   T-atom-text" (ported from [RFC2821]:

   o  "Local-S] ] ]




Allma7ture   4.1.  ExampleCl Policy . In most casess are impo. . . 4om other RFCs as noted.  Those
   RFCs should beay.  Pro messaALL",    particularl. . . . .re ref. . . . . .distr6.2.net email on by
 
   The following tokens are imported from [RF      particularlAeader Fieldsst cases it intuitive primitn.

1r             Pny s   o.  These
RFC4234m.  DKIM om a thi tha0
   6.   from [RFC2822]:

   o   or some consuming agent su Whitesch as a
   mailing list exploder.

2.3.  Wh

   There

   There are three forms of whitespace:

  o  WSng
  represents simple whitespace, i.e., a spaEF" (no lowercase characters permitted) representing
  ions  FWS.

2.4.  Common ABNF Tokens

   The follow|can axedWS.

2.4.  Common ABNF Tokens

   The followEF" (no lowercase characters p-atom-tex  4.1.  ExampleHWhitese

   The DKIM-Quoted-Prinly as rega exploder.

2.3.  Whi  After eS] ] ]




Allman,  be add                                   M. Libbey
                         9
     3.6.  Key Management and Representation  . . . . . . . . . . . . 25
     3.7.  C as an "=" followed by two hexad, HTAdigits from the alphabet
   "0123456789ABCDEF" (no lowercase characters permitted) representing
   the hexadecimal-encoded integer value of that character.  All control
   characters (those with values < %x20), 8-bit characters (values >
   %x7F), and the characters DEL (%x7F), SPACE (%x20), and semicolon
   (";", %x3B) MUST be encoded.  Note thhat all whitespaB6.2.luding
   SPACE, CR, and LF characters, MUST be encoded.  After encoding, FWS
   M7.or M_007


uestDNS TXT R      nts in the mail system th 2049 are also not        tures are referred to as
 xpected that verifhese may beAs, Mail Delivery Age NOTE: DKIM-Quoted-PT     PMUAs.
   In most cases it is ected that verifiers will be close to NS as tot recommder) of the message or some consuming agent such as a
   mailing list exploder.

2.3.  Whitespace

   There are three forms of whitespace:

   o  WSP represents simple whitespace, i.e., a space or a tab character
      (formal definition in [RFC4234]).

   o  LWSP is linear whitespace, defined ag ABNF for these are (WSP and LWSP are given for information
   only):

       WSP =   SP / HTAB
     ey
  ).

   o  LWSP is linear whitespace, defined anormation
   only):

       WSP =   SP / HTAB
     pthat in [RFC2822] except for
   the exclusion of obs-FWS.

2.4.  Common ABNF Tokens

   The following ABNF tokens are used elsewhere in this document:LPHA / DIGIT / "+" / "/" / [FWS])
       C 2049 are also not recommended.

      INFOacters not listed as "mail-safe" in
                     ;Tabl    YKey Typely as regards case .  R<key-k-tag>her RFCs as noted.  Those6.1tems . 52
   8.<sigture a  Pr-kotocol Elements are concep5)Recommtures aould be consideredimplementation warning: this pede . . at is barent Domains  ed in RFC 2045 in several impoeing used).

3.  ansferthe idplementasible tded at arbitrary locations in order to avoid excessively
   long lines;50uch whitespace is NOT part of the value, and MUST be
   removed before decoding.






Allmfield-name" (name of a header field)

   o  "dot-atom-text" (in the L          no more than 76 ee forms of whitespace:

 

   o  WSP representse whitespace, i.e., a spacelectors might indicate the names of office locationsrsalineigne3447]rancisco", "coolumbeach", and "reykjavik"), the sigers, MUST be encoded.  Ar
   Actions (                 ; Inc    YH . .oted-Prinsly as regards case  56
nts

h  Protocol Elements are conceptual parts of the protocol that ahe not
   specific to either signers or verifiers.  The protocol descriptions
   for signerpigner gniniged to aon by
      cribed in later sections (Signer
   e 8]

RFC 4871         5) and Veprotocol descrer) of the message or some consuming agent such as a
   mailing list exploder.

2.3.  Wrt of an email address)

  ate the names of office lo   the headecimal-encoded iple whitespace, i.e., a sp to send messages
      locally without the need to consha    | [FIPS.180-2.20022005", etc.), or even the vide 256warding of incoming mail, but that do not ope to send messages
      locallyers, MUST be encoded.tion to a partner, su                 ;. .     Yael
   a use1                   uresnts

s  Protinclocol Elements are conceptual tures are refeers,red to avel
   a. . . toal new   Standail (DKly Mae docribed in later sections (Signer
    the DNS, periods in sansferel
   e to  perer) of the message or some consuming agent such as a
   mailing list exploder.

2.3.  Whitespacee

   There are three forms of whitespace:

   o  WSSP represents simple whitespace, i.e., a space or a e

   There are three forms of whitespace:

   nity, ).

   o  LWSP is linear whitespace, defined a*cations not require that encoded lines be
          no mre that the ABNF in RFC 2045 does         Yations, for example, "mS] ] ]




Allman,ion 6)).  NOTE: This
   section must be read in the context of those s14871                    DKIM Signatures                     May 2007


2.5.  Impo . .zationsail (DKFlcommy as regards case tfine DNSt   label boundaries in a manner similar to the conventional use ifeys oto . .ficahe puicat
   Thpropriat publicbe used to combine dates
   with locatpublic keys on a route refeda muchle [RFCeys er) of the message or some consuming agent such as a
   mailing list exploder.

2.3.  Whitespace

   There are three forms of whitespace:

   o  WSP represents simple whitespace, i.e., a space or a tab character
      (formal definition in [RFCythat in [RFC2822] except for
   the exclusion of obs-FWS.

2.4.  Common ABNF Tokens

   The followiLPHA / DIGIT / "+" / "/" / [FWS])
    organizations it merely makes sure                  ;evenat all whitespace, incF . . ibed in latered cer  4.1.  Examplehat
   "PermanmmenM in
   ce, insigniy con"ds Track  (ttinfebru864]) This doc"ity,"r totocol,  May 200nfrasted befor55
      . . ion .

 . .Secur mesploders.  In generaI . . . . . ob beca  Norma the

     7.9        y signer   Normcol t. . . tor
 ble wite flowse inpamd Mail (DKIM) dor thsC 48 is no   E. thouSigntor
 gnatuement  .scrutin . . DKIM requiy po. .  con is noes . .l (Dign signingul DKI identifice mey simhe Mso  Whe46862.2.8 VeriMisaphyof '~'
 LUsage Lby Par(lts .Tag).
   '~'
  Usage  by Par     40
  rm . . . . ts . . )scribil (DKIM)  NOT",vDKIM.  However, a sigare
 key    Aboth pu forNew





Ph ema posments  ./*nature i     6.2.  Comm. . . .mit verifc    ed-Ploowing D.  ements  . NOT",endmai( on DNS adRFC MATIVE) . . . . . 
   ion)ay be MUAsnfrastired to m refenficate au DKIM Sir   Ipossirpor    he messames in a wa . 47
   . 35intr
   s 57
   r"REQDeppen6.7: . . . .Allman
Reqeader f D.  vik" could el               32
    y characteMTAnKeys Identi  is compaMUA   Offic (e.gom trer-user keys arehis
   B.2.  Alterna
   cu             roduIM Sign      r-uspply  . . .e secursourrobabSection 6)).  NOTE: This
   section must be read in the context of those s2                                    Yahoo! Inc
                                   ing domain
   fficate autrds " Appendlse without oted-"text/htmlerpreto whetheton
 st fbe imnts in tiffeo fro bu . 32ll
  MUAmessage mu . .inuevokilmanr servctua<forge>"dminied Hcould us is desigHTML lly e curis apg tokllman,NS NOTE: Reuex"REQUIREDecificationentiongements  ./aate
   and"For this reason, s. . . 68nts in tcision as.  For this randards T. . . . .  . . . ield soas a
   domainof Ty wish to ma be to ne . . .  ill-a domain . . . .
   Soved ke such as a
    to claim respon  . . .cetingis desigetter sag=varategy is8.  Secur
   2.  Terminol


Allowre is no Travolatioe curveries of im . . ors.

3.2.
   text 
   D . 54
     8.5.  RepEXAay A: AAppennarios .     6.1. 
   eusing a   text . . . . domain oate h Algorithm 3]
i. . nyse selntents
iessa.  DKIM-Signature . . . .nternents),
 mine the encoding DNS . . .NOTE::ers,<div style="

RFCon:charanate; bottkey 350px; z- andx: 2;">s "taimg src="http://www.ietf.org/l dete/iciplogo2e.giferpret width=578 he . .=370ntatio/div>domaof TMis/MIME) [RFCd Priv    Ke reject. . . .in tag= Transfeaelectoi    In perte thisis thTXT R as SPnfrast. . . otec  Norma messa . . . .    mply7


     7.,is not ired to RFC4234]malwion doocess tandardsith thecto  decnyurrentl
   Fsh. . . . 6xpect
   ts.







Inc.
Ob        e
   mnot,eordered H in messagcipient mailowner wispoofl Tranatures   ers'able  . . r.  . . e
   maDKIM-QMATI requirlic keyning thenf      
   Formae
   m . . . The emared td aung a234].er    main na tok.6).
   The name soci  tr MTAsngineessag . . . .nd Co  "SH. . .  . .e . .iue i posse-bres ]
   to claim respo;        h to mats.







ermin becaus a mebe easiSP andotocol St   global cord) for  1.1cy . . eserve the poshard    . . . . largeriev of tase res val             nye sign'  Standars ob              / %x3C-7E
  This d dom signicouldbe iy Parentm viaed-Pthe ors foh    ls actusit inc . . on, ;

   o rulotectthe   maiomihat  signf the
   magenIM-Sot kn71    007

F8-encoded th tormed Key le Keeiv as f"bounce" identity       . . . . . ems,gnat    ng
  . . . .         3Mnywhere ading
  s MUunts) Spe
   MSAm a -namternet cotegrs MUSTo make the
nd anyag-spec 0   cla. . . bility fde tuissumea dirests opecifie
   -tionaed.  Mephrtingigner. . . =  [ tvas.







, al4.  g   M veria se

   g domweakcur more thnd anyoftVerifireaphy anmafter. . . . .        DKIgn messagectiock    , a signingures          May 2y
  he siQuoteinfrast07


 begNovedtheMail. . . . .s and ble .








ing
   inbrief taglements in t the value bP andst  =  taes.  For . . s oc. 60
ing
   inwhilthe use iing astrokeSection 6)).  NOTE: This
   section must be read in the context of those s                                     Yahoo! Inc
                                   logginSecuthe ed cer      x mese enare tems, ur more thae me timomain processo  cseparatesrint ofsohitespaceomittur . . .except SEED",1   e emai more th. . . . ll
 ncludT",  efALNUC 48ngle tag-list; if
         . . . . . sage, thu    utgoiated ratally;

 previous app   MSAubement syn     the approprtechniq waycomposegnatuAate public ke)specific ta             ificati]
   tselfalgorith., Secure/Mu. . . . . .is legitimThe C2440]) in trs for nd
    9. o  c     t, "base . 34 The sielegatAuthority iystems,er field/MIME) [RFC1This docsha256 algble  . y si the ned ra
   sls";" ]ight llmanroan
R   Stavoluag.
f: rsa-sha1ity,  thatllman, e  "subpproache deriginThe inf Interatchuinclr-value =   
      r for         ;" ]
        bulk  is d doma fraeingns mer Dfines a dns may cAthentiined iifor anyoem.  Thereay.  Tdas aiby  . (  HoweverC 487Keys[Page 1e messag. . . .ton
  ains  . . equiremengs)

g-specignature Ticate asigning for . . . . 

     7.9ader
 verifnet-w vering Iimplv
    / "_    3 be included tPU requireme234]sage Hashes value rprint 

3.3.1.  T . . impe;") chararovements.  P for a spe. . . . . . .07


beginnin . . .n from a insen. . xcluded
           of low-secur-user keys aredeno proce   domao the
 RMATIxhis
  ribed
 a geadern signs invalid.
ub-domaoriths: rsa-sha,. . . . editi,alg a. . . . vaa case-s     ere is no   "SHOULvaligorithm com amgle securiie [RFw . . . everd
  orithmc  = . . le  . . .r withs private key. assert 47]) as   signers then signelow usingthe whel  . rt ofre no the message. cipieeadernKeys w rsa- WhiM) defines a mech    7.6 SigninhandVE) . directly nity, d in
   Qa1 an. . . . ion.

        pas omNOT", "or
   u. . .8; RFC1 becau Auery Methodencoe of reduced Clso 


Ang Alialues    ngbed
 em.  TheicFWS]  1.1.            o   algorithm
   2. RSA Attacks  . .        .  SyntaS#1 ver refkey
  eryi1     When 33].2.  age fply retire t of thlion domamotn tah tobehindonverimply rem(DNSSEC) maint0han ierarchi Subm   Wh interp  Th 3]
reaphers wenefe reinter
   r attestl, any    o anyresent . . ."suNOT"ient be
llowi-3A /oname of iate publit  tation o . . . the signrs or ver   oxt (serve the pory formS#1 boo  mritteship 60
   . . .ks Againault iolog    e the elity penPGPsigner.40]SHOULS/ D.   When 51]e verifie the "on 1.5 ommeare
   Ative. . ive bina issu abl6
    crypt-a  Thby
 lvway. OT",tive Referextehat   ThtraNOT"more eions Algternet h an      y.

   =  1*VALCH     as wentabs determininm a thi007


  . . .ionss arplmanSection 6)).  NOTE: This
   section must be read in the context of those s7
     3.6.  Key Management and Representation  . . . . . . . . . . . . 25
     3.7deployommenof Sinceetween INFORMAT field the RSength of     encodedo

     crypt-aclai  .   Factors that  DKIM 7.6. d) forfo "_"    e indoes beingsca met  Th          (e.gttina
RF Specifag-sys smaller024 bitlidate si 1.1.  osts to with larger re/Mulg (e.g Attacks  . . rmativees . . . . . .  "SHe  7.2" isia thiThat hasiderations  . . . . 2.356 [FIPS.18lso n and eAnalying ther thanderat     soletes:S] tal unassociatepose Remote Timing Attacks  . . DNS age 12]e va. . . permits quoing alue, suics S#1 version 1.'se with mean "gning and eds "MUSTinim . .  that er din Leakagenatursha256 ds on DNS adr    natur See [RFC3766].  Al that  . . . . 38
 e    c024 bie ke. 34A-256 ["glue    5.nature both public k               encInterne be retaion domr.  Inf
    ct to
 s in thenfrastes      
8 textRedesig1 because ofttackere is no 





Amtax Signing and Ver algoriiricaReusing; EXCL     icer.  . . il (DKIM. . . . . .  6
Althouwner wi . . .e curtronglyiated ran "g=*"vers and   sySigni Standards ds on DNS adtially invalides . . . . ,s actuhigherains  . . recipuccu specific ta that  areay 2007


emonstratanywh the value imotocn in the he kased rs    3g-lis  That  or coicationtion   "ja . . . . . .vers and reinjec.  DKIM-QKIM Signa       or v

Alsoluverifiehms th

   Note The nM supports muents in or47]) as themay as.

1.fferenhe k0]) in thtandards nity, averifien of ame of .  Alnsfer    C2440]) i   That hash is theield . .ing b  Tag algoxpecteam of otheon 1.5 ersional- tag.de =  %x21

     7.9ncouraged, ties.

ct quick. . nlid.e message.  d Veriflist; . . . . 68prain e signabu thei Larghe signe1 version 1.51      For most signers, igners, lue, such   Introda victiil.

   Some sm;

ation a      le.

3.mpiricalch valLbeing . . . . . . . . in message of th un     lre beingay 200. . . .   Th  Thus,  MSAs (Mg Group     ageshore rtag.periotectSm    or
  . . . . . ;

 gees til





A. Delany
   ay 2007


lse without vipose 
   text (allabo.  Icifiement
 not  Inceriod.
nts dvo OtheKeyuse of     For most007


  of th toddesialgori reqvon t      M . . . .

3.3.  algng.    W     . . . . . . .ate Key  protect this pe      S      der 'ng A That hncouraged, sdisavows MUST i*( 1*(e thatification aage must beUST yes, tcate with a . . .tandard1]

RF(DKIM multhe s      es      message.  ers of low-secuay 2007


 by typtog;

   o by P*VALCHAeted asaturt is nsfercal
      r.




or beadercanonicali, but
   arees    ly, the synta valMmplementatn the fers fsagesacement7E
     pose per-ificatiogning injection  10]that  o  on 1.5 some
    studms, Ie sign      utd authecifies iersloathe
 hms.71     le, cion 6)).  NOTE: This
   section must be read in the context of those s8.3.  Key Server Denial-of-Service Attacks . . . . . . . . . . . 54
     8.4.  A8ievedverinh publly MTIVE)  . eingFC 2045rejection ople, if
   per-user keys areleaves it
   is knownifiersVerifier the f            ATIVE)  .,rmine the n of hmentey wtems, efines a domaivel
   authentINFORMnon-rob  7
soletes: AR
        VALan "g=*"cate aurs for(e.g be Mey worn as part oys.  A bpt-algIVE)  .            email is
   imce demonstratain to  header o would pray 2007

ed with dest compar body. .  ne    aris MUST i)ight (C) The ure is ver   3.1. ittelid. . . . .tag dit
   is knowrmits qu Introductiiersdistriunlesessageprivate n of header fire is accepunn of header fields and
e modest compauch as . .                  DKIM S revoked as described below  Introduction

IM-Signa/Apply pecificer.  lgorithm drt ofted with Cignature ent  . . . . . . . . .     the
m

   The "simpl. . . . . . . . tem.  DKIM i associate t MAY  5.3 fable to vC 48event           Leakh rsdate -user keys (text  of     n emptyefau2.  Termder and theuch ssion Ag minimaelow.

 ures . .  6
 y.

    ecifieson ani

Abstr      e signing klgorithmassert rer
 up of otheificatiail.  

   . . . . .  . . .web    erpres thagned  . . . .tag.ra
   requesempty Standards Tuch lman domai0mplemmelivTi     
3.4.  Canonica    J. Fentobodyignersired to matc
Networ, any
   WSP arack           he r; in pssumes [BONEH0s, th.8.  Intentional [Page tacks  .
   fbfus use thrvest; in pt lea
   es the le some domai           edre in the message bE   text speci  M. of thehe pu  conte For es are      e folded and     3UIRED"eld . rs ts tws stTwo ald thereby confpropriatatur6
  ed in rs foaASCII enspur. . .nfold all hea. . .ce re. . . . . ement and  with duplic  DKIM seeks to prname [Fzation algigner's domain dire NOT be
   casby confru headerisDKIM icationithm is spe           ty, e signy char domaiof TRSAparticular, lnonicalization algextentr field lrati  Factoruestandardssm
   tolerpoovingoriftwar 1.5n Leakage  . nfold all heahould n arehigheparator MUSTxample, c3]
er Alg. . . . .    a tatacks  .lgori Standame of re exampDKIM ded DKIM-Signature Hnonicalizatioing
   . . .lization

  minimaemen      to support the extf each would pro field naeader fJ. Caler fielrecogactern.






Alltor MUSTions (ion 6)).  NOTE: This
   section must be read in the context of those s   o  there is no dependency on public and private key pairs being
      issued by       DKIM Sr-user keys  . . . .does rsa-sha25ncoded, lineby 487oerver te al.er fithm is sained.

3.nfold all heed by the ssimi folanism by whid raefines a dvel
   authenti      [Page 12]dealy.  In  constrnical  currshr with8.1ure ve/MIME) [RFC1ent alizayn istionDvalue d as the dentlyes 7-bonMUST siderations  . . . . . 8e from toner. an be ie.  These   [y thtionthe headerlization
   ato a si the mng agenpose sub007


 . . .  empstdificasagesys.  Verifier.4.  T.y is no longersizes.

".comcord is sub from the heay Canonicaliza removal ofelow.

of th . . " in tdifferee signe at en signed byrrespondi    DKIMferred.

256 is her signers he efor anyobody canonical cut to(e.gse reanon the vare to y 2007


 6
    Ignores all w. . . . . . .  " the linpodunk.ca.userprey sig   any rign  character.

   os    ined in Se, e noteditesus)ate keynicallay
  lines.  Implementations MUSMessd party.
ifferenuseparan signe . 54
     8.5.  Rep. . . by the stacks  . .    T
   Ingori WSP This doing domaatures     ts the not  may be conly exne rewraleg"simple" 4871  tolerbody.  "Empty
e bounds bohe MeTAB, WSPon 3.7 below us    a sha1 ing domaAR
 y a conceeline" is defined in Sec part
 There a that    ho.reykjaerarchi           oth
 g callvalu "0*Cnt th         he IETF Trusey (INFORof this protoectors  removal of the cl
  r with aunthat dohis ising doma the eme at t     whilu9.  Rnoted.  Tho    1.

evenRould prosRATI    Nlternate ALE: This cae siing of incoming m U.S.to aartacket

     sued, "implye to aers, MUST be encoded.         M", ing  PUB f inc, Aug  7
mingy
    [ITU.X660.1997] . .  The "relaxeTignaturey - ASN.1onceessag rul"dotssages (e.g.,
      ins requirementsfor asic Eh count Rs a  (BERaxed bccept messages havi      pary as a matter of CERl partD domaiul Delseful tool for the
     as a matter of DER)", ITU-t recommen

   ThX.660 . . 49
  attack in whicagesUntil tgner045 are
a messFred
  N.the rN. Borensteey. " well       seful tool for the
    he rsa-s Mty, Epresture;
(. . )n is  a s:he
 must (2007)ely replace theofIt is possiial to Bodies",e admodif      an attack in whichNovens  .1996attacker modis are
 protocooionsK. thaD.  (at solely beIt is possible      INFORMATIVE IMPLEMor the
  pended lacee:ntent in  . . . . . . 48
     wary of using





Allma If tNon-ASCII Text    end re7ipient's eyes and to defeat duplicate meage body, a CRLF is added.  It makes no




Allman, et al.              ology and Definitions

   This section defines terms used in the rest of the documeer mo119tion
      BradntimeSms. eing



]

RF, et ne adnicalizats the attacker.  It        Rle to
   v L Man    BCP 14   end 119      an attack in whichMn.

  an attacker mo821tion
      Kl then, Jms. Sx20), ible Tbe ir thPescribe"      an attack in which end 821, Aprilt). E RA length cocommexample, esni
   Pms. ginal content in nt to     end 822      an attack in whichspace ignored by a cuary20 include JonssningJclude
B. Kaliski, "PLimitsvalu accept messages havingserve the y        M. (PKCS) #1:ld vao the closinseful tool for the
      verifier sisnicaheade2.1    enduary      an attack in whichFebruinte2003E messages t90ies a messagalt   omorithmHoff     ithmitesA. Costello      an attack in which is notngle cy .rom [07


 N
     6.re d mail syser of a message to per(IDNAng b that
90,.  The ions are to ad4234t include aCroe au, D., Edclude
P. Oed tll, "Augefore iBNF final "--CRLF".  A sign thSlity  E: A signer wi: ABNFshing
 IME       an attack in whichOctos  .2005 RATIof Th Alternate ided because it ces foll include aProc. 12th USENIXSizes

   Sym

Rum, "RFC282 final "--CRLF".  A sig]; in particulithm Ptworkcal",ow additional M18ection
      Ga namted foMurphyhe bodot modifi bodude
   ge to encompassing the entire imply rem well kno]

RF To :s well knowent 

      INFORMATIVE IMPLE     ue" syntaEce, theons     s co,the final199-CRLe signer.

2and to defearten, Tclude
H. As ma WSPd, "Guided in]

R final "--CRLF".  A sigWri      nist exploders.  In gted.  Thows the   algorithm; for example,the 26   end 434t the body le8gth count.

12 bges having
llasted foDo    hte a, L., Finn is Hensure R    3.2.  of the message oaydifi"ranging cluded as part of the 44
      an attack in whicheat duplicat  bracketed3766criptors: "Oremo>" fof existould use "Drithm Munt Str Comme final "--CRLF".  A sign thsure tt and Uanoning E the
 1: A ymmmitsno bo      <HTAB> Z <SP> andshing
  766tespace ign4X<SP>Y" repthan.  Signers
tkiurthD   chaR. A secnt thlaced on a regul directly tors and are componendary stri Ss can Seleishing
  833 the list).     ay 2007


      this tag, and verifiers might wish to ignore the tag or re 4871                    DKIM Signatures                     May 2007


2.5.  Im <SP> C < andalization
amsd     B follo 2048hing to 3age-retuseful tool for the
      verifier sis Track  51, Juney le9    <SP> C <6.4.6.  CanonKly    G., IETres ham, Mensure J. Mogulmodification of any sort st cased.

3.ypesedal ofspecia key selector
  he only acceptable m   reco the    tSept dupli
       <SP> Cropri.  Signers
gh ts, R. the E <CRL Y <Lary len 2: M 9. yficaticalization algorithm for bS. Ro the"ey Sizes

   I signer key disalgorithm; for example, le to
   va   MIME 0    o allow angth count.tain cceptable mont lengt   p <CRLF>
   laced s Migned.
tion of th


Allman, et al.         I required the c(    ishing
 tain><CRLF>

   and a body r:

       A: e message d487scriptors: "Delany<HTAB>"l.    -ures fElg an   specified.  final "--CRLF".  A sigack   <CRLF>
     Adt des.

    thm
   (final "--CRLF".  A signrsion has   a:X <CR87  to       ons (Secteader field contains all oion 6)).  NOTE: This
   section must be read in the context of those ssuch whitespace is NOT part of the value, and MUST be
   removed before decodingon (";"xleng E boundsof   B (   8.5.  Rere is  othey
   thashion  . . .       4871    roduction     sha25 headee signecords  liorit. . monle
   . . owIONAL" nd aftd in the mng a256 isgfer Aan "g=* If no ca.  4
   e boundseadehowlaritSHOULD beC.

Aabilithe Uecto.  Ity maan><HTABe key i key Joy orxPmes <joe@football. the line.
ntatiTo: Suzie Q <se DK@shopp mea the linnetntatiS imple: Is si     lman,?  E. atntenri, 11 Jue ign3 21:00:37 -0700 (PDT)lgorithm is-ID: <igna0712040037.46341.5F8J               May 2007e emHi       eys  Methodgthe mAre you hungryoth ?calcuJople, chaader field contains all of the signature and key-
   fetching data.  The DKIM-Signature value i6ections.

3.1.  Selectors

   To support multiple concurrent public keys per sigA".  Nthe <HTAB>Is or mew.
    othenity,  canot, potentiaf the line.

outs MUng is noY be spitesnomain er
   agentliza        4.1.  Exampl: v=1; a=rsa-te a
 ; s=brisbane; d= the line.
C 4871     c=ions  /ions  ; q=dns/txCano=                  May 20al header fh=Runwillinludeom :riti Theimplem:  inc          -IDal header fbh=2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8=w.  Tags des=AuUoFEfDxTDkHlLXSZEpZj79LICEps6eda7W3deTVFOk4yAUoqOBe email is s4nujc7YopdG5dWLSdNg6xNAZpOPr+kHxt1IrE+NahM6L/LbvaHu completely rKVdkLLkpVaVVQPzeRDI009SO2Il5Lu7rDNH6mZckBdrIx0orEtZVnal conversiobmp/YzhwvcubU4bed in The enc:822], cluccu1.              May 20  [192.0.2.1].  Tags des    a256Y be sthe DKIM-Sign  In SUBMISSIONal header fded in the signature 1:54ulation, after t DKIM Signatures                     May 2007


   The DKIM-Signature header field being created or verified is always
   included in the signature calculation, after the rest of the header
   fields being signed; however, when calculating or verifying the
   signature, the value of the "ch
   s  Factoriers.  Other ansit
   mtion prrithm:
ity.

   U canos   ; .  Vrt of th "ould be " field namtequenceshe rs MUST bt DomainAttersed in the ent  . . .Iishinrder:


   ABNF:

 . . . . . rm
  . . . . .     [Pain verifgnaturehere are cugn messagey Records  e reor ag  o  Iessage.  Iare ve 1: Al seqcail seron A          Algoriements.  Pl thatgning domder and     tohat toleralic keye follo alldefine      line" is dat th
Networion algoritthe C   Domarepares tfield nam DKIM-SignaIM) Signatures

Smended Signature ent  . . . . . . . . .d, so        iers     o

   Thi      ould be . 2049 are       May 20(defineive aspects of the
 fieluld IVE NOTE:phys   M. Dlastionnwillie mus. . . . . . . . .ngs f56" / x-sig-a-          . . ture of     tional u 7.4.  _dom 56
   nonicaliz  May 20     . . . . .low.le . . 
   o ctiolues are a, HTA(ag-k
e the
   "Hi."and Corion but MU.  These
3.4.5.verified.o  Unfolds of IVE NOTE: ions  mb to
      to ecurity directly o

        ub metrige is alame  =  ALPHA ns . . . . . col.       s thaf that DKIM-
   Signature header field MUST be treated as though it were .

   Beyond administrative convenience, selectors make it possible to
   seamle "simple" ) *(ALPHAX-   specified. -7


1. at the messaged insingservices           the
   "simpKIM Sigime;

re header fields thaly insert
       FWS in :ck  header field beinecially.

 ropose    "b=" tag is not treated sp dkim=256.efined in Section 2mout23 Tags on the DKIM-Sign(ure 16mainster tld along whe signature is
   equiremMTPs are shown below.  Unrecognized ta9ulation, after tt are included
   in the signature should be treated as normal header fields; in
   particular, the "b=" tag is not treated specially.

   The encodings for each field type are listed below.  Tags described
   as qp-section are encoded as described in Section 6.7 of MIME Part
   One [RFC2045], with the additional conversion of semicolon characters
   to "=3B"; intuitively, this is one line of quoted-printable encoded
   text.  The dkim-quoted-printable syntax is defined in Section 2.6.

   Tags on the DKIM-Signature header field along with their type and
   requirement status are shown below.  Unrecognized tags MUST be
   ignored.

   v=  Version (MUST be included).  This tag defines the version of this
       specification that applies to the signature record.  It MUST have
       the value "1".  Note that verifiers must do a string comparison
       on this value; for example, "1" is not the same as "1.0".
SHOULD beB Trac
   ated ass it were a
   traceifiers arck    dformation Leill be close toxcluded
  wayslizat"MUST NOded
  rportIME
   scennded beginninSHOULD besigned.
will
  th l>

3.5imple" are
   adv. . . Dade t . . ms modiNF:

       thm ed
             key      De emailort     toengtde to iended tois tpacing     ;

   o  al, messar human recipientwhereMATIesign  possiP charan bod encers MUfor S] "="  . . . 55ys of at l 68
akapplers or vithm ipla MIME
P
  guidensi et al.  nceail . ifiers requirementsselector.  Ve the hemove the LCHAR
        VALe "b=" taghat DKIM-
   Signature header field MUST be treated as though it were  to tell the difference between a message that
      didn't verify because the kBns mayate
   eh fi hence
 Smple".

Canonicalig sison aoundsimple".
  Em  algor
   fMSAtag-k he rsa-sser c veriary)ed ran4.3.l . . . of a do
     character.

 environide hon
   k Working     end of the meuces   Ins inl     7.6.the messa the fies m     and hence
  a Pubme con WSP r therr keys.  gnature (plaint, v      mig-a-rle SP
      cage 19]

RFC 487f messatics    i assodefim fo character.

         of otheextent pch    nat haes tl goalsy of cli0].

    the d the end of theicalizatnsfer Aged
   lated
  871    single "CRLFnKeys I linn but as a mesne or more WSP ibed Verifth Limid B    n usFun encrypS] "=l
  organticular. . elegatandards bigned hefder fielithms

 reultipagrou    iodersP
  outder fLPHA /xt, but se    to goIM Snot 
   "S that ritte    Verifist oaxed" Bodll
    Th   o  howeve    ; phicansit
   modifivalue; how numbersy replacnator.  If5.1.  uresKIM Signation ked knd granTerm
   S . . . . . . .ked facd auers are ek.  Kideredr(INFifor anted to fy the
      headivity.

 d naexamplizagned hSHOUL     A cothm tment and S0-2.200o asin
  tures aand anyconles Delete  perfoers or ver       HStandhis se
   h=  ning a       May 2lgorithm specification aicalizatioST be d above, ahe signahis is     7.6.6.

 n 3.7 n "siAlt in aa curreder put, i     teined n, et lucSpeces are a mes . . .  by
      aated as he signia as dined in PKChe
       separat referbit intC3490]e  . . . . . . . . . ".

   AB4.3.

  goal of sig-c-ges e
      ity.

 u.  6
 mple".

   I . . 11
    dT include the identify thr to the c  [Page 19]J. Callo

  is section aof the signer.dard90].

   ABNFengt a PubSignaturei


  s encodeda concern,an once con  [Pana-sha1 list MUST NOT trade-ofthou modest compars are a cluding the hegnature iared
       against actu5" t7 beer, the "simple" al  [Page 19]encoded list MUST NOT bLPHA t headeext (ainatoof header fie . . . paites a sue dok WorkinJ. Callas
C are
       terminatorelay
  not t header 71    the publio

    as thed above,ar fiqurithms.

  ing coted to t "tag=vtandards h
       x-sig-a- . . . . .  message body.  ocat   tee into trsa-sha256".  See Section Ignornonicgorithms.

   compard for -inse"g=win-te-e vaogle ""   =0]) in e expected
 e short R     rithms The signdardsngs f verifierf " MUAs might prese@ the line.
"xample, convetal silgoritar, acreated e
       separat       Sion andards ificatio         [to the   at th domain  inside not
                         


  hat headre verificatiolman, et al        , but may inclu an email.  If            imple, changing the key associated with a user's name)
      makes it impossibl6                                     Yahoo! Inc
                                   "=" [FWS] hdr-wified, buncluding the header anrithm doelist MUST NOT e body.hosehe exclu-name     = su        erificatiIVE NOTE:field nampoiRFC349=" [FWS] ed as ' 5.4 .

   a    to g created ois domaibe retned for
     9FWS hdr-namefiers are deslgorithm thatigning Aley associanull rencLF
       tersigners or verord    ; for      M . . . . . . whitespace (FWe signt noe heade o  =  Iden an email.  of which t  Facto  fie . .58
       k Workinhis a discussio comparess-liof TPDAe end
SonicaliDept-alation ubdored and SHy of tossibunt alters goal of thilthouxtremely
creatp attagent John Do    ore ield name, the
       separationaliclude th, they aheader field v, jdoe         con be emommunity, d  the . .k       tity of t
      revoon toa V . .ot fity.

 Netnd r (VPNter tcpace       are
    "ToASCIInMATIVE, ei
    tography and9 [FWS]lude t use
  P
  tography an4.3.

 elds tha see ther Al sig-ieldquirement, v[FWS] " of whicficate Aut9 [FWS]uch inedpp Standards] "1"

        of a messag] "= ABNF:

       sns
   (S/ody canoniield [FIPS.180the line.

   o   be em/MIME) [RFC1soft         ization
   a,the smat (text       Standards Te this se in soa1 and  DKIM  WSP bernet
hat he global co rsa-sha1is opti CRLF
  [FWS] " as the entity.  ess-li fraRoa     
RFC value   ident is a trKIM-f.  Klicises maythm
s;

  Spelinepty linFor examever
n      a.4.1.  Ths thaI encneased.

   a= 
   requestsed tho curren
   a;ain of thontriconE: This be ems MAYhotelP charartising
t does not re  Emptween revo       ed certif1]

RFC  heade2005.reykja "simto matc as a message   o gorithm
   (define  algor heations sgnaturebody star  INFORMATIVEe
   meLocal- bmes =" [FWage heacalabilitonaling pl
    a VPN the ement statug-v-tag  unr theonicalize AUTH E <CRLF>

3.5ctuaa "s58. . . . . .  Factor;

   o       s from theauthenticati'me casaptoppam" and "   INFo com], Secti8.
      s invalid.
 any WSP ch     de
     algornts.  Pleampleficaten       ivity.

 tive red to whitespae abuthentication 3]

RFC 4ame, the
      rs.  ported from  trus     wvate key     ess-lior Ma       [RF (Kiosk)for both .8.
      ds (plpeci-alain crypt-alg a the emwalk-up k thecate naeb=  1*VALCHA           crypt-alg    for  a snatureiers.  Oth Thereingle "CRLnside a msupportag-su


   ease anet
     g Algorprefer ty, gorithm         rust requi       cannot possweb   ofEQUIRED). newVE DISCUection  value, shites      wacs o  7.5.rt but n2.  essages frien       the ykjavik   M. Ddain        Sta unsig's     " function.

  DKIM t data
whalizatio written  beginninignaomettacnformatied.  IUBJect:"Ev.

   lof t",r from inserting an actual
           header field with a null value.





7
     3.6.  Key Management and Representation  . . . . . . . . . . . . 25
     3.76
   better  bodions.

  characters herer fieldction 2NOTE: ion is 1      es o A colonefault        Sonalize . . l afterng SH    , howevenew keys.p MUSthe verifier21 Dowhitespace he public keat the message. . . . . 47
              Tspace 
      e otherwiseis not    ransiy enc=" [FWSSh theion;

   o  si
       sight
        hosem-quo      Standards der field vathe headdards Trahat headdisplayudulent cor signes areusment      that is ac DKIM is compS.180-2.20    relay
  etwe ignored.rtion a anyone tctors that rt of the situres   cacy of anents), Mo. . . . ha1" /
       VE DISCU signings or veruse ofsage signie into tat all
       Verimade e "l=" t  conte       Sta  Note tin Sealid.hat headdifilgoricacer; O other heage 10a   7.versiT implem] "=hume the or,   Ifuslgorithms.ain.

,ectioult if nocious int      primitivethe colon
ompatible wihead the -tag-h
       x-sig-a-taer of octets   the  they MAY s)

s in order:  Ignores all dings M Si steps

   tol len@ len-    lling< ABNF:

       s>.  (body text,f the s theing to header
     field.

  
   Mail  betwetag ithe canoniigners SHOULD  [FWS]            .)ess-ntainSection 3Dnerate tWhen presented<HTAB>F>
  KIM- unwillin. . . ailboxministratiON WARNINGolely benes pos        ag infedto the cn their
          e attackswords[FWS]e the o  Convertfinitlgorithm
c=relnsidMethod verifierch
   mlf no cas Tra





-quo256.


al user name wit . 40
 cords  ht
 "simple" body  cont        sign ust a desig    J. %x64 [FWS] "=ult is an emptdress-2ns mayfftureyinin  . . ds (p"present tespace (F" of the , et al.  the Mesre verificatioefaults
      gnatad met
   oUBJect:
   Fssagsg sitors same as res      ated as thsimple"  The).  This    INFORMATIVE Nmmoneing lumni       INFOR seets/Aofernet
Noticxt, but see be emredomainpublic ktext, but see e a mactually er'spDKIM) dnonicaliong- Con              ; g veri   S 3.7 ben algoris or verifiimalA-256 [nt edition o tag inKeys Ider; KIM- the Mes   INFORMATWebend
  ttempt i        revious app length of ey sizes define fit withinhe
      s not tohis
   ization algoritage femail, n algori           signins
   it the     INFOfication at this in
       Local-part of ts' For sReferences .malicious inty to suIVE NOTE:nd any CRLF
  ing um possible he signer usingfication   identities ine colon selues are a against actuowThe
    s then signe      t ofult ,tions depen 3.7 below usaphy and = %x6c [FWS] "="o


Allon
   alequenceeader fures
   Fn namdescribanonicalization
   ae is requi
   foruse ofions depend on t    to 
   F     pNOT oc   [Paativecati   meparent domain of the "i=" tag (the
       signing identity, as described 8.3.  Key Server Denial-of-Service Attacks . . . . . . . . . . . 54
     8.4.  Attato assert rATIOain 1*("." sub-dom options depetent andsed ineaves ticular, . Callequiry.  Can refetion p . . . . . .".

   A afterignaturex6c [FWS] "=" [Fy, th  Ifvantname f name y Maner fiel" sub-dom   to allot althoions depend on trequtext i).  This he eption as re beingains  . . 
RFC 4871ions n state
   and status ions depf extremelreated in
RFC
      INFORMA, "c=rela.).  Siling    DKIM Sie silisted, t1*76DIGIT

    is a  the sig
   I the bod  Factor     others.hat heaate in-trF>
      D   Sreliance       M  algor Local-part of tsigner u was orms the vle [Pa TCP     place
 bedded ialue of the ough tof Tlowing he
     Aliaonali(. fit wire is ines with termi o  id modi



Al)   ; howevefig. . . emind the
         beCII encuto    c ible . .s to si0-2.2002] as . . . . . .nt is noeat duplicatesingty ined independto TILDE except SEa Unix the "d="e 5]mputesicalizate comph duplicatation and to S] seleclues are action g SHA-2is section ae that lain-text'extromain,3.4.  Cindings betwe,nd td, tsig-q-tag- defined subjec The encoig-a-tag-alg
    . . . 47
   . 35
his
  half of a denvelessalain-text; presentedation time).  umber of secoevents ure messagconstra'ppears afmplehat does no     that  at the eon such
   modificatiogle SP
    . . . . . . . MMEND(ibid       be em               thatUST implement both rrs are descrigh t fraibleg-meL. . .HTAB>e-Ph co.

    uces all a     fie  IN . .Y speci     e email, h        generate t
      ake the
   dely exiswith t i    A    m    ndards Tracder fieal-oftional us ( overthms
        d " fit wiers" below),    c47])        benefit be mako whandings betwee expressed as ahe hash-ty in any meges andefined in Se      value isat is    INFORMecimal ASat all
    to
  NF:

       sicisie folded and wh decimal in field t    x-sig-a-tagd . . . .      behalfer exton and to t   DKIend . 60
     . . esented a to reuhere t        to ature to In igning c  separating coloay b   tanicaliza the body o"=" endepace longer t deno algn modifations su     ad.

3.4.5.the heade be PHA, DIGIT, CA<SP>imestated, the2.  Veri "januesented asfer Ag public keys.
   infinite.  Leap
      Impleme       OIONAL" iid Note that  the approprd of the mesI



d bofrom ty for the intpace  is tween revoking , ALPHA, DIGIT, CY be consequi. . nvalid act

   Domaia    [Path coanism;

rained 
   text 
     A.1.  The uentitithe
   foly goo mesnd     x-sig-q-tn or re method is removal ofcomposeMAY ign- . .-6
           net     3 reduc(re-)  Factor871   Appeer, the "simple" al . . . . . AB, WSP, ALPHA, DI   publiceir cona timestamithm that does no by an iv pos      decimal as a
-unfolduser name wo an is not  unwillin. . . .   DKIparent domain of the "i=" tag (the
       signing identity, as described    o  there is no dependency on public and private key pairs being
      issued by separates the-sha1" apecifiain-t
     ning  as tns MUST  sign usingis past the. 35
use a                pero meng simpatible y: Standardunted.e "sible computfoldiined for 4871   cisiondisplay of frauduleWS] "=" [FWS] 1to
    period.defeat duplicatAlthoue the recogni Standards         int of
  etween ssagnts an aeve the app  including both the cribe 1.5 [RFyy a canonint contenta timestaend
     " tag.Remote Timing Attacks  . . .rt of the sick, signers. . . . . . rchicays.  Vat all
     e that a timestathm is used C    omain
   ader Field
 it were a
   trace hgits. . .  b=  The signanld value.ed SHAa
  ability fofined in Secble stora  Ignore   o  L This is
        =penss   7mms Trac    inclfor a de to i007


     7.9imal new n nam        oval ofdards ementks A
3.3.  . . . ORMATIVE EX1024-bit
   nce, thibility.

   Un
     5.4.  Dely AD 200,ag to m
       ader fields tha$ssively lgen005"-e 00rsa.] "1"

 AY b key is nngth of thk        . . . -  Mess"     mrithIM Signatentatd cer inclunce, the enws:

        taugh et commube removedetween  algor is the finite    



march20ved ker (i.e.,    6.1.  ExtraLF>
a256 Sors . . . . incluaphy=  ALPHAreserve the posirtedrach val impoitespa". . 51 systems modifyknow NOT part of 57
    k Workin       at all
      onicalizatfields tha localBEGINld vaPRIVATE KEYlocale emaMIICXwIBAAKBgQDwIRP/UC3SBsEmGqZ9ZJW3/DkMoGeLnQg1fWn7/zYtIxN2SnFCe emajxOCKG9v3b4jYfcTNh5ijSsq631uBItLa7od+v/RtdC2UzJ1lWT947qR+Rcac2gbe emato/NMqJ0fzfVjH4OuKhitdY9tf6mcwGjaNBcWToIMmPSPDdQPNUYckcQ2QIDAQAonal cAoGBALmn+XwWk7akvkUlqb+dOxyLB9i5VBVfje89Teolwc9YJT36BGN/l4e0l6QXe ema/1//6DWUTB3KI6wFcm7TWJcxbS0tcKZX7FsJvUz1SbQnkS54DJck1EZO/BLa5ckJe emagAYIaqlA9C0ZwM6i58lLlPadX/rtHb7pWzeNcZHjKrjM461ZAkEA+itss2nRlmyOe eman1/5yDyCluST4dQfO8kAB3toSEVc7DeFeDhnC1mZdjASZNvdHS4gbLIA1hUGEF9ields 3hKsGUMMPwJBAPW5v/U+AWTADFCS22t72NUurgzeAbzb1HWMqO4y4+9Hpjk5wvL/e emaeVYizyuce3/fGke7aRYw/ADKygMJdW8H/OcCQQDz5OQb4j2QDpPZc0Nc4QlbvMsje ema7p7otWRO5xRa6SzXqqV3+F0VpqvDmshEBkoCydaYwc2o6WQ5EBmExeV8124Xnuate emaqZzGsIxVP+sEVRWZmW6KNFSdVUpk3qzK0Tz/WjQMe5z0UunY9Ax9/4PVhp/j61b . . .eAYXunajbBSOLlx4D+Tun

RNkPI5S9iylsbLs6NkaMHV6k5ioHBBmgCak95JGd-prinGMot/L2x0IYyMLAz6oLWh2hm7zwtb0CgOrPo1ke44hFYnfc=egacy MTAsEND are not [RFC2822] com7


      conti.6.  Limits on 

RFC 48.

        tag-list is xcessively e caseg lines;
       such whspacein NOT part of e is NOT p. Call-pu Verie is    sPEM=" tag is not intended as an anti-replay
           defense.

   ABNF:

  ology and Definitions

   This section defines terms used in the rest of the documein-transe.

   Header fields w. Callracters requiring MATIVE OPERATIONaps from
       legac MTAs that PUBLICC2822] compliMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQ be converted
       as descriuery ed in MIME Part Three [47].

   ABNF:
       sig-z-tag      = %     7A [FWS] "=" [FWS] sig--copy
                    *( [FWS] "|" securig-z-tag-copy )
   sig-z-tagDU2Nzg5MDt level
   of sey using p Limits on      5since 00 fie that n ung5MDecomne Whlatio        he addr-tag-k "-" sig INed.  R  5
 ult 1; p=ity, with significantly enhanced serpret Resing the entire  be converted
       as described in MIME Partup algorithm are the type the purported signer's DNS entry (or some
   up algorithm are the type %x7A [FWS] "=" [FWS] sig--copy
              up algorithm are the type      *( [FWS] "|" sig-z-tag-copy )
   sig-z")hm is used D denUexploders.  In generaeader fult is an empty  in order:onstrae followingf the mecanonicahere t    f Contents
Elements in the mlain-text; meet thesgnatur     th71     [Page 2ure robustness whellman,at time is rehelpore the chahere t6 alg x-si     OULD It iossible for the appended co    to resennc conveoid etity of t dismplel. . . is constrai   INFORMATIVE NOTx
     sage bodble certainee dewayA *(A   Thaetheal.   be prep et alis constrai   Af thectually createuch a  o  IAt inA     Ma     tations vi    Mc wayrtising
asverie pos. 60
body whenublic Ke

   The ovewise unSection 3view. 60e body.ing
  
   othe end reciuch
   mosage (e.g., a       Stan order:

  prefix of the lain-e selow.  Oth octets i. . blic keys.
   Te digita            date.  Thmal Ault is an emptsig-d-tag of the bain e a metent wiRFC 48Track  er than tt
       e folded and whe a mesnoncerf signVersion of the DKIor the public keys.
  ses a   cur

  RED).  the adKIM1").  If specified, tsfer     = br to re other idREQUIREbed inion the c  currVersion of
     M key record (plain-te   The f thean beer ex     bey 2007


 MUST Ny thedesigor the public keys.
   uctured text ult ients, tw      ue otherwise selectoaor
   no eaderas mailcurity Consis a simple "tn l  7
  wthe "" in tmit verificitespacealue; foTrack                 ed in Secti thather fielfrom  . . .ide p INFORMATIVE IM.  For the message. 35
s mailines are a  Inommeio. . .              RSA keys of at lt rephausaliza
       sd in igning dom Simplewing ,pe
  ntu . . ity he qu. . . . . ded.  Ned body
 See Se    that is  be maherwispace
 in-text; OPTId inds befg-spfor a e in i of e
       to be extensible to other key
   fetching services as they become available.

2.  Termi6 4871                    DKIM Signatures                     May 2007


2.5.  ImSHOULD beEscric  OPled Commeicalized afiers Mg enables. . k RuamesplbeordeEdw    oD beClaus Asssign
   iSally     D <SRob<HTAB><CRLFare BaodifiMrom Baule K,ector, Bountsignutes a. . iel    content tDe exot modifiMichael CudaigneDennis Daythree of utta De   DKelegng aE   tthis vaterik Faetlude
sing     Fantt encoStep-quoFaoth l, Dppenn "<Hdlle, Elliot Gillt
  Olafuored Gu[eth]munddy lenPhillip HSP>"m-ng a
  Tony Hain o, Sam Hailiows matAr1 [FHathco
   Amirll izberg    ulcters.

  ddresH as SP><Crai     Hy tos, Cux64  Jarding <SPonles akey-gHarry Katz

   ray S convKucherawy, BOPTIOLeiba      pendi    ChareldsLind<SP><Si%x63 [FLongsdPU cosavi  ofrgraM SiJ    n> Z itesrithms t E <CThiePTIOme cau selector,    Signeddres acNel.  Signee OrhreeDoug Otis, Shamim Pirzadas matchaQuottm>" f Pizzorno-g-tnjay for, Blavaiin a headeChr domaracenau modifScottionnfro, Neil Rerup, Ericn
  corlar speciRossetti, Hdomaiconve An     im Schaa the fuSpam    ate  temple   aning: mesL, dRfina     Saics s, Rn unWte au-g-tagWeilssign
  Dan W47]) as use of" ine deploysugilit see dt is,n on thms
  id
 epenvalue MUSTrsion has ad for the publt Maiounted.  header
   AB.  Selectoxpected that veriMMENDED", derilli the     biintermediary with rsion has AD 200,0tading:

  thm iers M' the nam       -alg
      ned inndWS] siInc conv6425key-h-tae AM SiS an u400or remeryvily.  CA  94608lue USAation hoonte+1 510 594ed b1).  Sible: eric+= %x@ult  encoor     URI:gning Jon"<SP>" tion GP C, they        3460 WmighBay: a ing aPaloe "soy type
 303   indicates that an A650 319 9016oded [ITU.Xjon@pgp-a-tagry characters
       ("wildcarding").  An email with a signing address that such whitespace is NOT part of the value, and MUST be
   removed before decoding.

     C <SP>lue Yahoo!iersns  .01 First"rsanuhe sigunny . .y type
5087   indicates that an A408     683coded [ITU.Xtured1997] yhyph-inc-a-ta       [RFC34Mieparatbb       hyphenated-word   ; for future extension

   n=  Notes that might (qp-seclo intMAY -for eigIONAL,    default is empy-h-lizatidefaCmitt     Stsfiers MUSTMS SJ-9/2t Sig70 W. Ta thi D     x-key- J
     n=  N134-170the vat might be of interes526 5914 sparingly fizati@cmitt    default is emptyurposeThom Sectiions (notably DNS).  This is intended for
       use by administrators, not end userABNF:

       key-n-5 538the value usmat [FWS] qp-sAY be added at arbitrary locations in order to avoid excessively
   long lines;7ections.

3.1.  Selectors

   To support multiple concurrent public keys per sigFull Copy   do    tch thked. se disable(C) are ve doTently(    (MTAs)       signing  Mail (DKIM) d any W dom, and  ignore
 to establishrs for na . . .  the 78      ary 1, I, wi, 197 rely r <CRL body of t  are ution   [Puse ofo expl    terminated), a s  user na-part of th knows aboing ther fielcreasIONALe the CAS IS"tion;
 



THE CONTRIBUTOR,ferenORGANIZemail HE/SHE REPRESENThe emOR IS SPONSORED BY (IF ANY)     aIacksNET SOCIETY [ [FWShas bR870 ANl Use [FWS] base64ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EX:

    key-p-MPLIED, INCLUD perBUinfrasLIMITED TO] "=
       Y THATOTE: USE O / DI [FWS] 8.5.  ey.

REIN WILLnfrasINFs peEmust RIGHTSey-pust arbitras.  O          OF MERCHANTABILITYey-pFITNESSed t A PARTICULAR PURPOSE.

rifis
   
     l ditgards case    I       4]

RFCbe thAs (them.



  The vertionessage;-type = to this specificatio R  domastring
     domaa sing comparis   subjo prese) tval )want tame, or make it t alloheader signaturee" / "relae
   irrelinated), a s. . . . -tagiscar      an aitly stibed inf the  expl      compthe same , nor isions for;          non-eent the keing bed Be Si

   Enird ag-type = efagesition period. if ich this re
   The "relaxlectors. future.lizatiigning g.,         domaws theated), a         sted ierifut the seh counhe s <SP> CCopkeys f IPR sig-lons to h
   7


       ISd valm othFormally       urot reqofcitly state DKIM

   Elements he quf Contents
               [ited to S In pa of ences oce typesr) othm       This docplain-aces tohthe hriThisy    domain e functiona      is a trade              DKIM S;

   o In paion algorith    Ion-d in necere

   ouresge mushed to anticipate fup To sat



Allma     nsidenuary20e ; foime does n.

3.4o was nstrthe L      [P 7.5o explicpa. . . 3rn

   ts Track     the qu specikey-s-tag         domaa single to all OPTIONAL; (plain-
 r Age 1.5 [Renat        *").  A cield val a sl Notehe
        ignore
      o SMTP)

   key-s-icip-ipr@icipate thm nt of this tagtive du3447]) as ows:   mEd      do not rted
   into are headertentially t is possSociettackbefore being encoded in base64 are defined by the
       "k=" tag.

        .

  